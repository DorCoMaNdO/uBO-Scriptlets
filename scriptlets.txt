# Collection of scriptlets to be used for injection/redirection on specific domains.
#
# - Each distinct resource entry is separated by an empty line.
# - The first line in a resource entry is: token mime-type[;encoding]
# - All following lines are the data. An empty line signals the end of the
#   data.
#
# If the encoding is absent, the data will be converted to base64, and the
# encoding will be set to `;base64`.

# eval-logger 
eval-logger.js application/javascript
(function() {
	let z = window.eval,
		log = console.log.bind(console);
	window.eval = function(a) {
		log('uBO: eval("%s")', a.toString());
		return z.apply(this, arguments);
	}.bind(window);
})();

# DNS-Prefetch-setter
dns-prefetch.js application/javascript
(function() {
	let docu = document;
	if (!docu.head) { return; }
	let meta = docu.createElement('meta');
	meta.setAttribute('http-equiv', 'x-dns-prefetch-control');
	meta.setAttribute('content', '{{1}}');
	docu.head.appendChild(meta);
})();

# HSTS-setter
https-always.js application/javascript
(function() {
	let docu = document;
	if (!docu.head) { return; }
	let meta = docu.createElement('meta');
	meta.setAttribute('name', 'Strict-Transport-Security');
	meta.setAttribute('content', 'max-age=31536000; includeSubDomains');
	docu.head.appendChild(meta);
})();

# inline-script-remover
remove-inline-script.js application/javascript
(function() {		
		let needle = '{{1}}';
		if ( needle === '' || needle === '{{1}}' ) {
				needle = '.?';
		} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
				needle = needle.slice(1,-1);
		} else {
				needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
		}
		needle = new RegExp(needle);
		let xhr = new XMLHttpRequest();
		xhr.open('GET', window.location.href);
		xhr.onload = () => {
			let html = xhr.response.replace(/<script\b[\s\S]*?<\/script>/gi, script => {
			if (script.match(needle)) {
					return '';
			} else {
					return script;
				}
			});
			document.open();
			document.write(html);
			document.close();
		};
		xhr.send();
})();

# inline-style-remover
remove-inline-style.js application/javascript
(function() {		
		let needle = '{{1}}';
		if ( needle === '' || needle === '{{1}}' ) {
				needle = '.?';
		} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
				needle = needle.slice(1,-1);
		} else {
				needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
		}
		needle = new RegExp(needle);
		let xhr = new XMLHttpRequest();
		xhr.open('GET', window.location.href);
		xhr.onload = () => {
			let html = xhr.response.replace(/<style\b[\s\S]*?<\/style>/gi, style => {
			if (style.match(needle)) {
					return '';
			} else {
					return style;
				}
			});
			document.open();
			document.write(html);
			document.close();
		};
		xhr.send();
})();

# element-setAttribute
set-attr.js application/javascript
(function() {
	let attr = '{{2}}';
	if ( attr === '' || attr === '{{2}}' ) { return; }
	let attrs = attr.split(/\s*\|\s*/);
	let selector = '{{1}}';
	if ( selector === '' || selector === '{{1}}' ) {
		selector = '[' + attrs.join('],[') + ']';
	}
	let stattr = function(ev) {
		if ( ev ) { window.removeEventListener(ev.type, stattr, true); }
		try {
			let nodes = document.querySelectorAll(selector), i = nodes.length;
			while ( i-- ) {
				let node = nodes[i], j = attrs.length;
				while ( j-- ) { node.setAttribute(attrs[j], '{{3}}'); }
			}
		} catch(ex) {
		}
	};
	if ( document.readyState === 'loading' ) {
		window.addEventListener('DOMContentLoaded', stattr, true);
	} else {
		stattr();
	}
})();

# cookie-setter
cookie-set.js application/javascript
(function () {
	     document.cookie = '{{1}}={{2}}; max-age={{3}}; secure; path=/;';
})();		

# window.open.defuser-alternative
wopen.js application/javascript
(function () {
	      window.open = () => {};
	      this.open = () => {};
	      parent.open = () => {};
	      window.opener = () => {};
})();

# element-clicker-onload
eclick2.js application/javascript
(function() {
         let selector = '{{1}}';
 		if ( selector === '' || selector === '{{1}}' ) {
        	return;
    	}
    	 let click = function() {
        	let element = document.querySelectorAll(selector);
        	element.click();
        };
    	if (document.readyState === 'complete') {
        	window.addEventListener('load', click);
    	} else {
        	click();
    	}
})();

# background-image-setter
bis.js application/javascript
(function() {
         let selector = '{{1}}';
 		if ( selector === '' || selector === '{{1}}' ) {
        	return;
    	}
    	 let bis = function() {
        	let element = document.querySelector(selector);
        	element.style.backgroundImage = '{{2}}';
        };
    	if (document.readyState === 'loading') {
        	window.addEventListener('DOMContentLoaded', bis);
    	} else {
        	bis();
    	}
})();

# element-clicker
eclick.js application/javascript
(function() {
	let selector = '{{1}}';
	if ( selector === '' || selector === '{{1}}' ) {
		return;
	}
	let click = function() {
		let element = document.querySelector(selector);
		element.click();
	};
	if ( document.readyState === 'loading' || document.readyState === 'interactive' ) {
		click();
	} else {
		window.addEventListener('DOMContentLoaded', click);
	}
})();

# element-focusser
efocus.js application/javascript
(function() {
	let selector = '{{1}}';
	if ( selector === '' || selector === '{{1}}' ) {
		return;
	}
	let focus = function() {
		let element = document.querySelector(selector);
		element.focus();
	};
	if ( document.readyState === 'loading' || document.readyState === 'interactive' ) {
		window.addEventListener('DOMContentLoaded', focus);
	} else {
		focus();
	}
})();

# element-replacer
ereplace.js application/javascript
(function() {
	let selector = '{{1}}';
	if ( selector === '' || selector === '{{1}}' ) {
		return;
	}
	let noop = document.createElement('noop');
	let replace = function() {
		let element = document.querySelector(selector);
		element.replaceWith(noop);
	};
	if (document.readyState === 'interactive' || document.readyState === 'complete') {
		replace();
	} else {
		window.addEventListener('DOMContentLoaded', replace);
	}
})();

# referrer-policy-setter
ref-policy.js application/javascript
(function() {
	let docu = document;
	if (!docu.head) { return; }
	let meta = docu.createElement('meta');
	meta.setAttribute('name', 'referrer');
	meta.setAttribute('content', '{{1}}');
	docu.head.appendChild(meta);
})();

# feature-policy-setter
fp.js application/javascript
(function() {
	let docu = document;
	if (!docu.head) { return; }
	let meta = docu.createElement('meta');
	meta.setAttribute('http-equiv', 'Feature-Policy');
	meta.setAttribute('content', '{{1}}');
	docu.head.appendChild(meta);
})();

# element-replacer-onload
ereplace2.js application/javascript
(function() {
	let selector = '{{1}}';
	if ( selector === '' || selector === '{{1}}' ) {
		return;
	}
	let noop = document.createElement('noop');
	let replace = function() {
		let element = document.querySelector(selector);
		element.replaceWith(noop);
	};
	if (document.readyState === 'complete') {
		replace();
	} else {
		window.addEventListener('load', replace);
	}
})();

# variable-value-setter
set-value.js application/javascript
(function() {
	let name = '{{1}}';
	let data = '{{2}}';
	let Object = window.Object.bind(window);
	let descriptor = window.Object.getOwnPropertyDescriptor.bind(window.Object);
	let defineProperty = window.Object.defineProperty.bind(window.Object);
	let finalSetter = function() { };
	let finalGetter = function() { return data; };
	let trustedSetters = {};
	let makeProxy = function(parent, chain) {
		let i = chain.indexOf('.');
		if ( i === -1 ) {
			let current = descriptor(parent, chain);
			if ( !current || current.set !== finalSetter || current.get !== finalGetter ) {
				defineProperty(parent, chain, {
					configurable: false,
					set: finalSetter,
					get: finalGetter
				});
			}
		} else {
			let name = chain.slice(0, i);
			let val = parent[name];
			chain = chain.substring(i + 1);
			if ( val instanceof Object ) {
				makeProxy(val, chain);
			} else {
				let current = descriptor(parent, name);
				if ( !current || !trustedSetters[chain] || trustedSetters[chain] !== current.set ) {
					let setter = function(value) {
						if ( value instanceof Object ) {
							try {
								makeProxy(value, chain);
								val = value;
							} catch ( err ) { }
						}
					};
					trustedSetters[chain] = setter;
					defineProperty(parent, name, {
						configurable: false,
						set: setter,
						get: function() { return val; }
					});
				}
			}
		}
	};
	let define = function(payload) {
		data = payload;
		try {
			makeProxy(window, name);
		} catch ( err ) { }
	};
	switch ( data ) {
		case "''":              return define('');
		case 'true':		return define(true);
		case 'false':		return define(false);
		case '1':		return define(1);
		case '0':		return define(0);
		case 'null':            return define(null);
		case 'undefined':	return define(undefined);
		case 'noopFunc':	return define(function() { });
		case 'trueFunc':        return define(function() { return true; });
		case 'falseFunc':       return define(function() { return false; });
		case 'nullFunc':        return define(function() { return null; });
		case 'unFunc':          return define(function() { return undefined; });
		case 'oneFunc':         return define(function() { return 1; });
		case 'zeFunc':		return define(function() { return 0; });
		default:		return define(data);	
	}
})();

# element-adder
eaddr.js application/javascript
(function() {
	let identifier = '{{1}}';
	let element = document.createElement('div');
	if ( identifier.charAt(0) === '#' ) {
		element.id = identifier.substring(1);
	} else if ( identifier.charAt(0) === '.' ) {
		element.className = identifier.substring(1);
	} else {
		return;
	}
	element.style.display = '{{2}}';
	document.documentElement.appendChild(element);
})();

# element-remover
eremove.js application/javascript
(function() {
	let selector = '{{1}}';
	if ( selector === '' || selector === '{{1}}' ) {
		return;
	}
	let remove = function() {
		let element = document.querySelectorAll(selector);
		element.remove();
	};
	if (document.readyState === 'loading') {
		remove();
	} else {
		window.addEventListener('DOMContentLoaded', remove);
	}
})();

# element-remover-onload
eremove2.js application/javascript
(function() {
	let selector = '{{1}}';
	if ( selector === '' || selector === '{{1}}' ) {
		return;
	}
	let remove = function() {
		let element = document.querySelectorAll(selector);
		element.remove();
	};
	if ( document.readyState === 'complete' ) {
		remove();
	} else {
		window.addEventListener('load', remove);
	}
})();

# atob-defuser
noatob.js application/javascript
(function() {
	let needle = '{{1}}';
	if ( needle === '' || needle === '{{1}}' ) {
		needle = '.?';
	} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
		needle = needle.slice(1,-1);
	} else {
		needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	needle = new RegExp(needle);
	realNoAtob = window.atob;
	window.atob = function(a) {
		if ( !needle.test(a.toString()) ) {
			realNoAtob.call(window, a);
		}
	}.bind(window);
})();

# atob-logger
atob-logger.js application/javascript
(function() {
	let z = window.atob,
		log = console.log.bind(console);
	window.atob = function(a) {
		log('uBO: atob("%s")', a.toString());
		return z.apply(this, arguments);
	}.bind(window);
})();

# btoa-defuser
nobtoa.js application/javascript
(function() {
	let needle = '{{1}}';
	if ( needle === '' || needle === '{{1}}' ) {
		needle = '.?';
	} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
		needle = needle.slice(1,-1);
	} else {
		needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	needle = new RegExp(needle);
	realNoBtoa = window.btoa;
	window.btoa = function(a) {
		if ( !needle.test(a.toString()) ) {
			realNoBtoa.call(window, a);
		}
	}.bind(window);
})();

# btoa-logger
btoa-logger.js application/javascript
(function() {
	let z = window.btoa,
		log = console.log.bind(console);
	window.btoa = function(a) {
		log('uBO: btoa("%s")', a.toString());
		return z.apply(this, arguments);
	}.bind(window);
})();

# decodeURIComponent-defuser
noduc.js application/javascript
(function() {
	let needle = '{{1}}';
	if ( needle === '' || needle === '{{1}}' ) {
		needle = '.?';
	} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
		needle = needle.slice(1,-1);
	} else {
		needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	needle = new RegExp(needle);
	realnoduc = window.decodeURIComponent;
	window.decodeURIComponent = function(a) {
		if ( !needle.test(a.toString()) ) {
			realnoduc.call(window, a);
		}
	}.bind(window);
})();

# decodeURIComponent-logger
duc-logger.js application/javascript
(function() {
	let z = window.decodeURIComponent,
		log = console.log.bind(console);
	window.decodeURIComponent = function(a) {
		log('uBO: decodeURIComponent("%s")', a.toString());
		return z.apply(this, arguments);
	}.bind(window);
})();

# encodeURIComponent-defuser
noeuc.js application/javascript
(function() {
	let needle = '{{1}}';
	if ( needle === '' || needle === '{{1}}' ) {
		needle = '.?';
	} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
		needle = needle.slice(1,-1);
	} else {
		needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	needle = new RegExp(needle);
	realnoeuc = window.encodeURIComponent;
	window.encodeURIComponent = function(a) {
		if ( !needle.test(a.toString()) ) {
			realnoeuc.call(window, a);
		}
	}.bind(window);
})();

# encodeURIComponent-logger
euc-logger.js application/javascript
(function() {
	let z = window.encodeURIComponent,
		log = console.log.bind(console);
	window.encodeURIComponent = function(a) {
		log('uBO: encodeURIComponent("%s")', a.toString());
		return z.apply(this, arguments);
	}.bind(window);
})();

# parseInt-defuser
nopi.js application/javascript
(function() {
	let needle = '{{1}}';
	if ( needle === '' || needle === '{{1}}' ) {
		needle = '.?';
	} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
		needle = needle.slice(1,-1);
	} else {
		needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	needle = new RegExp(needle);
	realnopi = window.parseInt;
	window.parseInt = function(a) {
		if ( !needle.test(a.toString()) ) {
			realnopi.call(window, a);
		}
	}.bind(window);
})();

# parseInt-logger
nopi-logger.js application/javascript
(function() {
	let z = window.parseInt,
		log = console.log.bind(console);
	window.parseInt = function(a) {
		log('uBO: parseInt("%s")', a.toString());
		return z.apply(this, arguments);
	}.bind(window);
})();

# String.fromCharCode-defuser
schar.js application/javascript
(function() {
	let needle = '{{1}}';
	if ( needle === '' || needle === '{{1}}' ) {
		needle = '.?';
	} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
		needle = needle.slice(1,-1);
	} else {
		needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	needle = new RegExp(needle);
	realschar = window.String.fromCharCode;
	window.String.fromCharCode = function(a) {
		if ( !needle.test(a.toString()) ) {
			realschar.call(window, a);
		}
	}.bind(window);
})();

# String.fromCharCode-logger
schar-logger.js application/javascript
(function() {
	let z = window.String.fromCharCode,
		log = console.log.bind(console);
	window.String.fromCharCode = function(a) {
		log('uBO: String.fromCharCode("%s")', a.toString());
		return z.apply(this, arguments);
	}.bind(window);
})();

# String.prototype.charCodeAt-defuser
stcharat-defuser.js application/javascript
(function() {
	let needle = '{{1}}';
	if ( needle === '' || needle === '{{1}}' ) {
		needle = '.?';
	} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
		needle = needle.slice(1,-1);
	} else {
		needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	needle = new RegExp(needle);
	realstcharat = window.String.prototype.charCodeAt;
	window.String.prototype.charCodeAt = function(a) {
		if ( !needle.test(a.toString()) ) {
			realstcharat.call(window, a);
		}
	}.bind(window);
})();


# String.prototype.charCodeAt-logger 
stcharat-logger.js application/javascript
(function() {
	let z = window.String.prototype.charCodeAt,
		log = console.log.bind(console);
	window.String.prototype.charCodeAt = function(a) {
		log('uBO: String.prototype.charCodeAt("%s")', a.toString());
		return z.apply(this, arguments);
	}.bind(window);
})();


# document.write-defuser
dwrite.js application/javascript
(function() {
	let needle = '{{1}}';
	if ( needle === '' || needle === '{{1}}' ) {
		needle = '.?';
	} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
		needle = needle.slice(1,-1);
	} else {
		needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	needle = new RegExp(needle);
	rdwrite = document.write.bind(document);
	window.document.write = function(a) {
		if ( !needle.test(a.toString()) ) {
			rdwrite.call(window, a);
		}
	}.bind(window);
})();

# document.write-logger
dwrite-logger.js application/javascript
(function() {
	let z = window.document.write.bind(document),
		log = console.log.bind(console);
	window.document.write = function(a) {
		log('uBO: document.write("%s")', a.toString());
		return z.apply(this, arguments);
	}.bind(window);
})();

# document.getElementById-defuser
dgebi.js application/javascript
(function() {
	let needle = '{{1}}';
	if ( needle === '' || needle === '{{1}}' ) {
		needle = '.?';
	} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
		needle = needle.slice(1,-1);
	} else {
		needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	needle = new RegExp(needle);
	rdgebi = document.getElementById.bind(document);
	window.document.getElementById = function(a) {
		if ( !needle.test(a.toString()) ) {
			rdgebi.call(window, a);
		}
	}.bind(window);
})();

# document.getElementById-logger
dgebi-logger.js application/javascript
(function() {
	let z = window.document.getElementById.bind(document),
		log = console.log.bind(console);
	window.document.getElementById = function(a) {
		log('uBO: document.getElementById("%s")', a.toString());
		return z.apply(this, arguments);
	}.bind(window);
})();

# window.alert-defuser
alt.js application/javascript
(function() {
	let needle = '{{1}}';
	if ( needle === '' || needle === '{{1}}' ) {
		needle = '.?';
	} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
		needle = needle.slice(1,-1);
	} else {
		needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	needle = new RegExp(needle);
	ralt = window.alert;
	window.alert = function(a) {
		if ( !needle.test(a.toString()) ) {
			ralt.call(window, a);
		}
	}.bind(window);
})();

# window.alert-logger
alt-logger.js application/javascript
(function() {
	let z = window.alert,
		log = console.log.bind(console);
	window.alert = function(a) {
		log('uBO: window.alert("%s")', a.toString());
		return z.apply(this, arguments);
	}.bind(window);
})();

# document.createElement-defuser
dce.js application/javascript
(function() {
	let needle = '{{1}}';
	if ( needle === '' || needle === '{{1}}' ) {
		needle = '.?';
	} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
		needle = needle.slice(1,-1);
	} else {
		needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	needle = new RegExp(needle);
	rdce = document.createElement.bind(document);
	window.document.createElement = function(a) {
		if ( !needle.test(a.toString()) ) {
			rdce.call(window, a);
		}
	}.bind(window);
})();

# document.createElement-logger
dce-logger.js application/javascript
(function() {
	let z = window.document.createElement.bind(document),
		log = console.log.bind(console);
	window.document.createElement = function(a) {
		log('uBO: document.createElement("%s")', a.toString());
		return z.apply(this, arguments);
	}.bind(window);
})();

# document.readyState-defuser
drs.js application/javascript
(function() {
	let needle = '{{1}}';
	if ( needle === '' || needle === '{{1}}' ) {
		needle = '.?';
	} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
		needle = needle.slice(1,-1);
	} else {
		needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	needle = new RegExp(needle);
	rdrs = document.readyState.bind(document);
	window.document.readyState = function(a) {
		if ( !needle.test(a.toString()) ) {
			rdrs.call(window, a);
		}
	}.bind(window);
})();

# document.readyState-logger
drs-logger.js application/javascript
(function() {
	let z = window.document.readyState,
		log = console.log.bind(console);
	window.document.readyState = function(a) {
		log('uBO: document.readyState("%s")', a.toString());
		return z.apply(this, arguments);
	}.bind(window);
})();

# document.querySelector-defuser
dqs.js application/javascript
(function() {
	let needle = '{{1}}';
	if ( needle === '' || needle === '{{1}}' ) {
		needle = '.?';
	} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
		needle = needle.slice(1,-1);
	} else {
		needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	needle = new RegExp(needle);
	rdqs = document.querySelector.bind(document);
	window.document.querySelector = function(a) {
		if ( !needle.test(a.toString()) ) {
			rdqs.call(window, a);
		}
	}.bind(window);
})();

# document.querySelector-logger
dqs-logger.js application/javascript
(function() {
	let z = window.document.querySelector.bind(document),
		log = console.log.bind(console);
	window.document.querySelector = function(a) {
		log('uBO: document.querySelector("%s")', a.toString());
		return z.apply(this, arguments);
	}.bind(window);
})();

# document.querySelectorAll-defuser
dqsa.js application/javascript
(function() {
	let needle = '{{1}}';
	if ( needle === '' || needle === '{{1}}' ) {
		needle = '.?';
	} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
		needle = needle.slice(1,-1);
	} else {
		needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	needle = new RegExp(needle);
	rdqsa = document.querySelectorAll.bind(document);
	window.document.querySelectorAll = function(a) {
		if ( !needle.test(a.toString()) ) {
			rdqsa.call(window, a);
		}
	}.bind(window);
})();

# document.querySelectorAll-logger
dqsa-logger.js application/javascript
(function() {
	let z = window.document.querySelectorAll.bind(document),
		log = console.log.bind(console);
	window.document.querySelectorAll = function(a) {
		log('uBO: document.querySelectorAll("%s")', a.toString());
		return z.apply(this, arguments);
	}.bind(window);
})();

# document.getElementsByClassName-defuser
dgebcn.js application/javascript
(function() {
	let needle = '{{1}}';
	if ( needle === '' || needle === '{{1}}' ) {
		needle = '.?';
	} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
		needle = needle.slice(1,-1);
	} else {
		needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	needle = new RegExp(needle);
	rdgebcn = document.getElementsByClassName.bind(document);
	window.document.getElementsByClassName = function(a) {
		if ( !needle.test(a.toString()) ) {
			rdgebcn.call(window, a);
		}
	}.bind(window);
})();

# document.getElementsByClassName-logger
dgebcn-logger.js application/javascript
(function() {
	let z = window.document.getElementsByClassName.bind(document),
		log = console.log.bind(console);
	window.document.getElementsByClassName = function(a) {
		log('uBO: document.getElementsByClassName("%s")', a.toString());
		return z.apply(this, arguments);
	}.bind(window);
})();

# document.getElementsByName-defuser
dgebn.js application/javascript
(function() {
	let needle = '{{1}}';
	if ( needle === '' || needle === '{{1}}' ) {
		needle = '.?';
	} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
		needle = needle.slice(1,-1);
	} else {
		needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	needle = new RegExp(needle);
	rdgebn = document.getElementsByName.bind(document);
	window.document.getElementsByName = function(a) {
		if ( !needle.test(a.toString()) ) {
			rdgebn.call(window, a);
		}
	}.bind(window);
})();

# document.getElementsByName-logger
dgebn-logger.js application/javascript
(function() {
	let z = window.document.getElementsByName.bind(document),
		log = console.log.bind(console);
	window.document.getElementsByName = function(a) {
		log('uBO: document.getElementsByName("%s")', a.toString());
		return z.apply(this, arguments);
	}.bind(window);
})();

# document.getElementsByTagName-defuser
dgebtn.js application/javascript
(function() {
	let needle = '{{1}}';
	if ( needle === '' || needle === '{{1}}' ) {
		needle = '.?';
	} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
		needle = needle.slice(1,-1);
	} else {
		needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	needle = new RegExp(needle);
	rdgebtn = document.getElementsByTagName.bind(document);
	window.document.getElementsByTagName = function(a) {
		if ( !needle.test(a.toString()) ) {
			rdgebtn.call(window, a);
		}
	}.bind(window);
})();

# document.getElementsByTagName-logger
dgebtn-logger.js application/javascript
(function() {
	let z = window.document.getElementsByTagName.bind(document),
		log = console.log.bind(console);
	window.document.getElementsByTagName = function(a) {
		log('uBO: document.getElementsByTagName("%s")', a.toString());
		return z.apply(this, arguments);
	}.bind(window);
})();
