# Collection of scriptlets to be used for injection/redirection on specific domains.
#
# - Each distinct resource entry is separated by an empty line.
# - The first line in a resource entry is: token mime-type[;encoding]
# - All following lines are the data. An empty line signals the end of the
#   data.
#
# If the encoding is absent, the data will be converted to base64, and the
# encoding will be set to `;base64`.

# eval-logger
# example.com##+js(eval-logger)
eval-logger.js application/javascript
(() => {
	'use strict';
	let z = window.eval,
		log = console.log.bind(console);
	window.eval = function(a) {
		log('uBO: eval("%s")', String(a));
		return z.apply(this, arguments);
	}.bind(window);
})();

# javascript-logger
# example.com##+js(js-logger)
js-logger.js application/javascript
(() => {
		'use strict';
		const logscripts = ev => {
						  if (ev) { window.removeEventListener(ev.type, logscripts, true); }
						  try {
							const scripts = document.querySelectorAll('script');
							const log = console.log.bind(console);
								for (const script of scripts) {
									if (script.outerHTML) {
										log('uBO: javascript("%s")', script.outerHTML);
									}	
								}
						  } catch(ex) {
						  }
		};
		if (document.readyState === 'complete') {
			logscripts(); 
		} else {
			window.addEventListener('load', logscripts, true);
		}
})();

# cascading-stylesheets-logger
# example.com##+js(css-logger)
css-logger.js application/javascript
(() => {
		'use strict';
		const logstylesheets = ev => {
							if (ev) { window.removeEventListener(ev.type, logstylesheets, true); }
							try {
								const stylesheets = document.querySelectorAll('style');
								const log = console.log.bind(console);
									for (const stylesheet of stylesheets) {
										if (stylesheet.outerHTML) {
											log('uBO: stylesheet("%s")', stylesheet.outerHTML);
										}	
									}
							} catch(ex) {
							}
		};
		if (document.readyState === 'complete') {
			logstylesheets();
		} else {
			window.addEventListener('load', logstylesheets, true);
		}
})();

# noscript-logger
# example.com##+js(noscript-logger)
noscript-logger.js application/javascript
(() => {
		'use strict';
		const lognoscripts = ev => {
						    if (ev) { window.removeEventListener(ev.type, lognoscripts, true); }
						    try {
							const noscripts = document.querySelectorAll('noscript');
							const log = console.log.bind(console);
								for (const noscript of noscripts) {
									if (noscript.outerHTML) {
										log('uBO: noscript("%s")', noscript.outerHTML);
									}	
								}
						    } catch(ex) {
						    }
		};
		if (document.readyState === 'complete') {
			lognoscripts(); 
		} else {
			window.addEventListener('load', lognoscripts, true);
		}
})();

# hyperlink-setter
# example.com##+js(hyperlink-setter)
hyperlink-setter.js application/javascript
(() => {
		'use strict';
		const linksetter = ev => { 
						     if (ev) { window.removeEventListener(ev.type, linksetter, true); }
						     try {
							   const hosts = document.getElementsByClassName('host');
							   for (const host of hosts) {
									host.setAttribute('href', host.getAttribute('link'));
							   }
						     } catch (ex) {
						     }
		};
		if (document.readyState === 'loading') {
			window.addEventListener('DOMContentLoaded', linksetter, true);
		} else {
			linksetter();
		}
})();

# response-header-setter
# example.com##+js(set-respheader, Cross-Origin-Resource-Policy, same-site)
set-respheader.js application/javascript
(() => {
	'use strict';
	const docu = document;
	if (!docu.head) { return; }
	const meta = docu.createElement('meta');
	meta.setAttribute('http-equiv', '{{1}}');
	meta.setAttribute('content', '{{2}}');
	docu.head.appendChild(meta);
})();

# referrer-policy-setter
# example.com##+js(set-refpolicy, no-referrer)
set-refpolicy.js application/javascript
(() => {
	'use strict';
	const docu = document;
	if (!docu.head) { return; }
	const meta = docu.createElement('meta');
	meta.setAttribute('name', 'referrer');
	meta.setAttribute('content', '{{1}}');
	docu.head.appendChild(meta);
})();

# element-remover
# example.com##+js(eremove, #example)
eremove.js application/javascript
(() => {
		'use strict';
		let selector = '{{1}}';
		if ( selector === '' || selector === '{{1}}' ) {
			return;
		}	
		const rm = ev => {
					   if (ev) { window.removeEventListener(ev.type, rm, true); }
					   try {
						const elements = document.querySelectorAll(selector);
						for (const element of elements) {
							element.remove();
						}
					   } catch(ex) {
					   }
		};
		if (document.readyState === 'loading') {
			 window.addEventListener('DOMContentLoaded', rm, true);
		} else {
			 rm();
		}
})();

# script-tag-remover
# example.com##+js(remove-inline-script, /adblock|adsense/)
remove-inline-script.js application/javascript
(() => { 
          'use strict';
	  let needle = '{{1}}';
          if ( needle === '' || needle === '{{1}}' ) {
              needle = '.?';
          } else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
              needle = needle.slice(1,-1);
          } else {
              needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
          }
          needle = new RegExp(needle);
          const jsnode = ev => {
                                        if (ev) { window.removeEventListener(ev.type, jsnode, true); }
                                   	try {
                                          	const jss = document.querySelectorAll('script');
                                          	for (const js of jss) {
                                              		if (js.outerHTML.matchAll(needle)) {
                                                                	js.remove();
                                              		}			
                                          	}
                                   	} catch(ex) {
                                    	}
          };
          if (document.readyState === 'loading') {
                   window.addEventListener('DOMContentLoaded', jsnode, true);
          } else {
                   jsnode();
          }
})();

# script-tag-remover-alternative
# example.com##+js(rm-js, /adblock|adsense/)
rm-js.js application/javascript
(() => {
		'use strict';
		let needle = '{{1}}';
		if ( needle === '' || needle === '{{1}}' ) {
			needle = '.?';
		} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
			needle = needle.slice(1,-1);
		} else {
			needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
		}
		needle = new RegExp(needle);
		const xhr = new XMLHttpRequest();
		xhr.open('GET', window.location.href, false);
		xhr.onload = () => {
			const html = xhr.response.replace(/<script\b[\s\S]*?<\/script>/g, script => {
			if (script.match(needle)) {
					return '';
			} else {
					return script;
				}
			});
			document.open();
			document.write(html);
			document.close();
		};
		xhr.send();
})();

# style-tag-remover
# example.com##+js(remove-inline-style, /cookie-notice/)
remove-inline-style.js application/javascript
(() => { 
          'use strict';
	  let needle = '{{1}}';
          if ( needle === '' || needle === '{{1}}' ) {
              needle = '.?';
          } else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
              needle = needle.slice(1,-1);
          } else {
              needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
          }
          needle = new RegExp(needle);
          const cssnode = ev => {
                                         if (ev) { window.removeEventListener(ev.type, cssnode, true); }
                                   	 try {
                                          	const css = document.querySelectorAll('style');
                                          	for (const cs of css) {
                                              		if (cs.outerHTML.matchAll(needle)) {
                                                                	cs.remove();
                                              		}			
                                          	}
                                   	 } catch (ex) {
                                    	 }
          };
          if (document.readyState === 'loading') {
                   window.addEventListener('DOMContentLoaded', cssnode, true);
          } else {
                   cssnode();
          }
})();

# style-tag-remover-alternative
# example.com##+js(rm-css, /cookie-notice/)
rm-css.js application/javascript
(() => {
		'use strict';
		let needle = '{{1}}';
		if ( needle === '' || needle === '{{1}}' ) {
			needle = '.?';
		} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
			needle = needle.slice(1,-1);
		} else {
			needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
		}
		needle = new RegExp(needle);
		const xhr = new XMLHttpRequest();
		xhr.open('GET', window.location.href, false);
		xhr.onload = () => {
			const html = xhr.response.replace(/<style\b[\s\S]*?<\/style>/g, style => {
			if (style.matchAll(needle)) {
					return '';
			} else {
					return style;
				}
			});
			document.open();
			document.write(html);
			document.close();
		};
		xhr.send();
})();

# noscript-tag-remover
# example.com##+js(remove-inline-noscript, /text/)
remove-inline-noscript.js application/javascript
(() => { 
          'use strict';
	  let needle = '{{1}}';
          if ( needle === '' || needle === '{{1}}' ) {
              needle = '.?';
          } else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
              needle = needle.slice(1,-1);
          } else {
              needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
          }
          needle = new RegExp(needle);
          const nosnode = ev => {
                                         if (ev) { window.removeEventListener(ev.type, nosnode, true); }
                                   	 try {
                                          	const noss = document.querySelectorAll('noscript');
                                          	for (const nos of noss) {
                                              		if (nos.outerHTML.matchAll(needle)) {
                                                                	nos.remove();
                                              		}			
                                          	}
                                   	 } catch(ex) {
                                    	 }
          };
          if (document.readyState === 'loading') {
                   window.addEventListener('DOMContentLoaded', nosnode, true);
          } else {
                   nosnode();
          }
})();

# frame-tag-remover
# example.com##+js(remove-inline-frame, /frame/)
remove-inline-frame.js application/javascript
(() => { 
          'use strict';
	  let needle = '{{1}}';
          if ( needle === '' || needle === '{{1}}' ) {
              needle = '.?';
          } else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
              needle = needle.slice(1,-1);
          } else {
              needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
          }
          needle = new RegExp(needle);
          const framenode = ev => {
                                           if (ev) { window.removeEventListener(ev.type, framenode, true); }
                                   	   try {
                                          	const frames = document.querySelectorAll('iframe');
                                          	for (const frame of frames) {
                                              		if (frame.outerHTML.matchAll(needle)) {
                                                                	frame.remove();
                                              		}			
                                          	}
                                   	   } catch(ex) {
                                    	   }
          };
          if (document.readyState === 'loading') {
                   window.addEventListener('DOMContentLoaded', framenode, true);
          } else {
                   framenode();
          }
})();

# link-tag-remover
# example.com##+js(remove-link-tag, /prefetch|preload|prerender/)
remove-link-tag.js application/javascript
(() => { 
          'use strict';
	  let needle = '{{1}}';
          if ( needle === '' || needle === '{{1}}' ) {
              needle = '.?';
          } else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
              needle = needle.slice(1,-1);
          } else {
              needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
          }
          needle = new RegExp(needle);
          const linknode = ev => {
                                          if (ev) { window.removeEventListener(ev.type, linknode, true); }
                                   	  try {
                                          	const links = document.querySelectorAll('link');
                                          	for (const link of links) {
                                              		if (link.outerHTML.matchAll(needle)) {
                                                                	link.remove();
                                              		}			
                                          	}
                                   	  } catch(ex) {
                                    	  }
          };
          if (document.readyState === 'loading') {
                   window.addEventListener('DOMContentLoaded', linknode, true);
          } else {
                   linknode();
          }
})();

# meta-tag-remover
# example.com##+js(remove-meta-tag, /refresh|referrer/)
remove-meta-tag.js application/javascript
(() => { 
          'use strict';
	  let needle = '{{1}}';
          if ( needle === '' || needle === '{{1}}' ) {
              needle = '.?';
          } else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
              needle = needle.slice(1,-1);
          } else {
              needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
          }
          needle = new RegExp(needle);
          const metanode = ev => {
                                          if (ev) { window.removeEventListener(ev.type, metanode, true); }
                                   	  try {
                                          	const metas = document.querySelectorAll('meta');
                                          	for (const meta of metas) {
                                              		if (meta.outerHTML.matchAll(needle)) {
                                                                	meta.remove();
                                              		}			
                                          	}
                                   	  } catch(ex) {
                                    	  }
          };
          if (document.readyState === 'loading') {
                   window.addEventListener('DOMContentLoaded', metanode, true);
          } else {
                   metanode();
          }
})();

# element-setAttribute
# example.com##+js(set-attr, preload, none, video)
set-attr.js application/javascript
(() => {
          'use strict';
          const token = '{{1}}';
          if ( token === '' || token === '{{1}}' ) { return; }
          const tokens = token.split(/\s*\|\s*/);
          let selector = '{{3}}';
          if ( selector === '' || selector === '{{3}}' ) {
              selector = `[${tokens.join('],[')}]`;
          }
          const stattr = ev => {
              				if (ev) { window.removeEventListener(ev.type, stattr, true); }
              				try {
                    				const nodes = document.querySelectorAll(selector);
                    				for (const node of nodes) {
                        				for (const attr of tokens) {
                            					node.setAttribute(attr, '{{2}}');
                        				}
                    				}
              				} catch(ex) {
              				}
          };
          if (document.readyState === 'loading') {
                   window.addEventListener('DOMContentLoaded', stattr, true);
          } else {
                   stattr();
          }
})();

# element-toggleAttribute-DOMContentLoaded
# example.com##+js(tog-attr, preload, video)
tog-attr.js application/javascript
(() => {
          'use strict';
          const token = '{{1}}';
          if ( token === '' || token === '{{1}}' ) { return; }
          const tokens = token.split(/\s*\|\s*/);
          let selector = '{{2}}';
          if ( selector === '' || selector === '{{2}}' ) {
              selector = `[${tokens.join('],[')}]`;
          }
          const togattr = ev => {
              				 if (ev) { window.removeEventListener(ev.type, togattr, true); }
            				 try {
                    				const nodes = document.querySelectorAll(selector);
						    for (const node of nodes) {
							for (const attr of tokens) {
							    	node.toggleAttribute(attr);
							}
						    }
					 } catch(ex) {
					 }
          };
          if (document.readyState === 'loading') {
                   window.addEventListener('DOMContentLoaded', togattr, true);
          } else {
                   togattr();
          }
})();

# set-property on DOMContentLoaded
# example.com##+js(set-prop, example, example)
set-prop.js application/javascript
(() => {
		    'use strict';
		    let chain = '{{1}}';
		    let prop = '{{2}}';
		    if ( chain === '' || chain === '{{1}}' ) {
			return;
		    }
		    const set = ev => {
						if (ev) { window.removeEventListener(ev.type, set, true); }
						try {
							const owner = window;
							chain = chain.split('.');
							for (const i = 0; i < chain.length - 1; i++) {
			    						owner = owner[chain[i]];
							}
							owner[chain[chain.length - 1]] = prop;
						} catch(ex) {
						}
		    };
		    if (document.readyState === 'loading') {
			     window.addEventListener('DOMContentLoaded', set, true);
		    } else {
			     set();
		    }
})();

# cookie-setter
# example.com##+js(cookie-set, name, value, age)
cookie-set.js application/javascript
(() => {
	     'use strict';
	     document.cookie = '{{1}}={{2}}; max-age={{3}}; secure; path=/;';
})();		

# element-replacer
# example.com##+js(ereplace, .element)
ereplace.js application/javascript
(() => {
		'use strict';
		let selector = '{{1}}';
		if ( selector === '' || selector === '{{1}}' ) {
			return;
		}
		const div = document.createElement('div');
		const replace = ev => {
						if (ev) { window.removeEventListener(ev.type, replace, true); }
						try {
							const elements = document.querySelectorAll(selector);
							for ( const element of elements ) {
			      					element.replaceWith(div);
							}
						} catch(ex) {
						}
		};
		if (document.readyState === 'loading) {
			 window.addEventListener('DOMContentLoaded', replace, true);
		} else {
			 replace();
		}
})();

# variable-value-setter
# example.com##+js(set-value, property, value)
set-value.js application/javascript
(() => {
		'use strict';
		let name = '{{1}}';
		let data = '{{2}}';
		const Object = window.Object.bind(window);
		const descriptor = window.Object.getOwnPropertyDescriptor.bind(window.Object);
		const defineProperty = window.Object.defineProperty.bind(window.Object);
		const finalSetter = () => { };
		const finalGetter = () => { return data; };
		const trustedSetters = {};
		const makeProxy = (parent, chain) => {
			const i = chain.indexOf('.');
			if ( i === -1 ) {
				const current = descriptor(parent, chain);
				if ( !current || current.set !== finalSetter || current.get !== finalGetter ) {
					defineProperty(parent, chain, {
						configurable: false,
						set: finalSetter,
						get: finalGetter
					});
				}
			} else {
				let name = chain.slice(0, i);
				const val = parent[name];
				chain = chain.substring(i + 1);
				if ( val instanceof Object ) {
					makeProxy(val, chain);
				} else {
					const current = descriptor(parent, name);
					if ( !current || !trustedSetters[chain] || trustedSetters[chain] !== current.set ) {
						const setter = (value) => {
							if ( value instanceof Object ) {
								try {
									makeProxy(value, chain);
									val = value;
								} catch ( err ) { }
							}
						};
						trustedSetters[chain] = setter;
						defineProperty(parent, name, {
							configurable: false,
							set: setter,
							get: () => { return val; }
						});
					}
				}
			}
		};
		const define = (payload) => {
			data = payload;
			try {
				makeProxy(window, name);
			} catch ( err ) { }
		};
		switch ( data ) {
			case 'noopFunc':	return define(() => { });
			case 'trueFunc':        return define(() => { return true; });
			case 'falseFunc':       return define(() => { return false; });
			case 'nullFunc':        return define(() => { return null; });
			case 'unFunc':          return define(() => { return undefined; });
			case 'oneFunc':         return define(() => { return 1; });
			case 'zeFunc':		return define(() => { return 0; });
			default:		return define(data);
		}
})();

# remove-property on DOMContentLoaded
# example.com##+js(remove-prop, foo.bar)
remove-prop.js application/javascript
(() => {
	      'use strict';
  	      const remove = ev => {
	      				    if (ev) { window.removeEventListener(ev.type, remove, true); }
					    try {
                  				  delete {{1}}
					    } catch(ex) {
					    }
              };
              if (document.readyState === 'loading') {
                       window.addEventListener('DOMContentLoaded', remove, true);
              } else {
                       remove();
              }
})();

# element-adder
# example.com##+js(eaddr, #element, block)
eaddr.js application/javascript
(() => {
		'use strict';
		let identifier = '{{1}}';
		const element = document.createElement('div');
		if ( identifier.charAt(0) === '#' ) {
			element.id = identifier.substring(1);
		} else if ( identifier.charAt(0) === '.' ) {
			element.className = identifier.substring(1);
		} else {
			return;
		}	
		element.style.display = '{{2}}';
		document.documentElement.appendChild(element);
})();

# strip-queries from URLs
# example.com##+js(query-stripper, /\?fbclid=\w+/)
query-stripper.js application/javascript
(() => {
		'use strict';
		let query = '{{1}}';
		if ( query === '' || query === '{{1}}' ) {
			query = '.?';
		} else if ( query.slice(0,1) === '/' && query.slice(-1) === '/' ) {
			query = query.slice(1,-1);
		} else {
			query = query.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
		}
		query = new RegExp(query);
		if (location.href.search(query) !== -1) {
			const url = window.location.href;
			const strippedurl = url.replace(query, '');
			location.href = strippedurl;
		}
})();
