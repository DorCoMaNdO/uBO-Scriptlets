# Collection of scriptlets to be used for injection/redirection on specific domains.
#
# - Each distinct resource entry is separated by an empty line.
# - The first line in a resource entry is: token mime-type[;encoding]
# - All following lines are the data. An empty line signals the end of the
#   data.
#
# If the encoding is absent, the data will be converted to base64, and the
# encoding will be set to `;base64`.

# eval-logger
# example.com##+js(eval-logger)
eval-logger.js application/javascript
(() => {
	'use strict';
	let z = window.eval,
		log = console.log.bind(console);
	window.eval = function(a) {
		log('uBO: eval("%s")', String(a));
		return z.apply(this, arguments);
	}.bind(window);
})();

# javascript-logger
# example.com##+js(js-logger)
js-logger.js application/javascript
(() => {
		'use strict';
		let logscripts = () => {
			let scripts = document.querySelectorAll('script');
			let log = console.log.bind(console);
			for (let script of scripts) {
				if (script.outerHTML) {
				        log('uBO: javascript("%s")', script.outerHTML);
  		     		}	
			}
		};
		if (document.readyState === 'complete') {
			logscripts();
		} else {
			addEventListener('load', logscripts);
		}
})();

# hyperlink-setter
# example.com##+js(hyperlink-setter)
hyperlink-setter.js application/javascript
(() => {
		'use strict';
		let linksetter = () => {
			let hosts = document.getElementsByClassName('host');
			for (let host of hosts) {
				 host.setAttribute('href', host.getAttribute('link'));
                        }	 
		};
		if (document.readyState === 'interactive' || document.readyState === 'complete') {
			linksetter();
		} else {
			addEventListener('DOMContentLoaded', linksetter);
		}
})();

# cascading-stylesheets-logger
# example.com##+js(css-logger)
css-logger.js application/javascript
(() => {
		'use strict';
		let logcss = () => {
			let stylesheets = document.querySelectorAll('style');
			let log = console.log.bind(console);
			for (let stylesheet of stylesheets ) {
				if (stylesheet.outerHTML) {
				         log('uBO: stylesheet("%s")', stylesheet.outerHTML);
  		     		}
			}
		};
		if (document.readyState === 'complete') {
			logcss();
		} else {
			addEventListener('load', logcss);
		}
})();

# noscript-logger
# example.com##+js(noscript-logger)
noscript-logger.js application/javascript
(() => { 
		'use strict';
		let lognoscript = () => {
			let noscripts = document.querySelectorAll('noscript');
			let log = console.log.bind(console);
			for (let noscript of noscripts) {
				if (noscript.outerHTML) {
				         log('uBO: noscript("%s")', noscript.outerHTML);
  		     		}
			}
		};
		if (document.readyState === 'complete') {
			lognoscript();
		} else {
			addEventListener('load', lognoscript);
		}
})();

# response-header-setter
# example.com##+js(set-respheader, Cross-Origin-Resource-Policy, same-site)
set-respheader.js application/javascript
(() => {
	'use strict';
	let docu = document;
	if (!docu.head) { return; }
	let meta = docu.createElement('meta');
	meta.setAttribute('http-equiv', '{{1}}');
	meta.setAttribute('content', '{{2}}');
	docu.head.appendChild(meta);
})();

# referrer-policy-setter
# example.com##+js(set-refpolicy, no-referrer)
set-refpolicy.js application/javascript
(() => {
	'use strict';
	let docu = document;
	if (!docu.head) { return; }
	let meta = docu.createElement('meta');
	meta.setAttribute('name', 'referrer');
	meta.setAttribute('content', '{{1}}');
	docu.head.appendChild(meta);
})();

# element-remover
# example.com##+js(eremove, #example)
eremove.js application/javascript
(() => {
	'use strict';
	let selector = '{{1}}';
	if ( selector === '' || selector === '{{1}}' ) {
		return;
	}
	let rm = () => {
		let elements = document.querySelectorAll(selector);
		for ( let element of elements ) {
		      element.remove();
		}      
	};
	if (document.readyState === 'interactive' || document.readyState === 'complete' ) {
		rm();
	} else {
		addEventListener('DOMContentLoaded', rm);
	}
})();

# script-tag-remover
# example.com##+js(remove-inline-script, /adblock|adsense/)
remove-inline-script.js application/javascript
(() => { 
          'use strict';
	  let needle = '{{1}}';
          if ( needle === '' || needle === '{{1}}' ) {
              needle = '.?';
          } else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
              needle = needle.slice(1,-1);
          } else {
              needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
          }
          needle = new RegExp(needle);
          let jsnode = () => {
                                let jss = document.querySelectorAll('script');
                                for (let js of jss) {
                                        if (js.outerHTML.match(needle)) {
                                                         js.remove();
                                        }		
                                }
          };
          if (document.readyState === 'interactive' || document.readyState === 'complete') {
                   jsnode();
          } else {
                   addEventListener('DOMContentLoaded', jsnode);
          }
})();

# script-tag-remover-alternative
# example.com##+js(rm-js, /adblock|adsense/)
rm-js.js application/javascript
(() => {
		'use strict';
		let needle = '{{1}}';
		if ( needle === '' || needle === '{{1}}' ) {
			needle = '.?';
		} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
			needle = needle.slice(1,-1);
		} else {
			needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
		}
		needle = new RegExp(needle);
		let xhr = new XMLHttpRequest();
		xhr.open('GET', location.href, false);
		xhr.onload = () => {
			let html = xhr.response.replace(/<script\b[\s\S]*?<\/script>/g, script => {
			if (script.match(needle)) {
					return '';
			} else {
					return script;
				}
			});
			document.open();
			document.write(html);
			document.close();
		};
		xhr.send();
})();

# style-tag-remover
# example.com##+js(remove-inline-style, /cookie-notice/)
remove-inline-style.js application/javascript
(() => { 
          'use-strict';
	  let needle = '{{1}}';
          if ( needle === '' || needle === '{{1}}' ) {
              needle = '.?';
          } else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
              needle = needle.slice(1,-1);
          } else {
              needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
          }
          needle = new RegExp(needle);
          let cssnode = () => {
                                let css = document.querySelectorAll('style');
                                for (let cs of css) {
                                        if (cs.outerHTML.match(needle)) {
                                                         cs.remove();
                                        }		
                                }
          };
          if (document.readyState === 'interactive' || document.readyState === 'complete') {
                   cssnode();
          } else {
                   addEventListener('DOMContentLoaded', cssnode);
          }
})();

# noscript-tag-remover
# example.com##+js(remove-inline-noscript, /text/)
remove-inline-noscript.js application/javascript
(() => { 
          'use-strict';
	  let needle = '{{1}}';
          if ( needle === '' || needle === '{{1}}' ) {
              needle = '.?';
          } else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
              needle = needle.slice(1,-1);
          } else {
              needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
          }
          needle = new RegExp(needle);
          let nssnode = () => {
                                let nss = document.querySelectorAll('noscript');
                                for (let ns of nss) {
                                        if (ns.outerHTML.match(needle)) {
                                                         ns.remove();
                                        }		
                                }
          };
          if (document.readyState === 'interactive' || document.readyState === 'complete') {
                   nssnode();
          } else {
                   addEventListener('DOMContentLoaded', nssnode);
          }
})();

# frame-tag-remover
# example.com##+js(remove-inline-frame, /frame/)
remove-inline-frame.js application/javascript
(() => { 
          'use-strict';
	  let needle = '{{1}}';
          if ( needle === '' || needle === '{{1}}' ) {
              needle = '.?';
          } else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
              needle = needle.slice(1,-1);
          } else {
              needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
          }
          needle = new RegExp(needle);
          let framenode = () => {
                                let frames = document.querySelectorAll('iframe');
                                for (let frame of frames) {
                                        if (frame.outerHTML.match(needle)) {
                                                         frame.remove();
                                        }		
                                }
          };
          if (document.readyState === 'interactive' || document.readyState === 'complete') {
                   framenode();
          } else {
                   addEventListener('DOMContentLoaded', framenode);
          }
})();

# link-tag-remover
# example.com##+js(remove-link-tag, /prefetch|preload|prerender/)
remove-link-tag.js application/javascript
(() => { 
          'use-strict';
	  let needle = '{{1}}';
          if ( needle === '' || needle === '{{1}}' ) {
              needle = '.?';
          } else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
              needle = needle.slice(1,-1);
          } else {
              needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
          }
          needle = new RegExp(needle);
          let linknode = () => {
                                let links = document.querySelectorAll('link');
                                for (let link of links) {
                                        if (link.outerHTML.match(needle)) {
                                                         link.remove();
                                        }		
                                }
          };
          if (document.readyState === 'interactive' || document.readyState === 'complete') {
                   linknode();
          } else {
                   addEventListener('DOMContentLoaded', linknode);
          }
})();

# meta-tag-remover
# example.com##+js(remove-meta-tag, /refresh|referrer/)
remove-meta-tag.js application/javascript
(() => { 
          'use-strict';
	  let needle = '{{1}}';
          if ( needle === '' || needle === '{{1}}' ) {
              needle = '.?';
          } else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
              needle = needle.slice(1,-1);
          } else {
              needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
          }
          needle = new RegExp(needle);
          let metanode = () => {
                                let metas = document.querySelectorAll('meta');
                                for (let meta of metas) {
                                        if (meta.outerHTML.match(needle)) {
                                                         meta.remove();
                                        }		
                                }
          };
          if (document.readyState === 'interactive' || document.readyState === 'complete') {
                   metanode();
          } else {
                   addEventListener('DOMContentLoaded', metanode);
          }
})();

# autoplay-blocker
# example.com##+js(autoplay-defuser)
autoplay-defuser.js application/javascript
(() => {
	      'use strict';
	      let autoplay = () => {  
		  	let media = HTMLMediaElement;
			media.autoplay = 'false'; 
	      };
	      if (document.readyState === 'interactive' || document.readyState === 'complete' ) {
		      autoplay();
	      } else {
		      addEventListener('DOMContentLoaded', autoplay);
	      }
})();

# element-setAttribute
# example.com##+js(set-attr, preload, none, video)
set-attr.js application/javascript
(() => {
          'use strict';
          let token = '{{1}}';
          if ( token === '' || token === '{{1}}' ) { return; }
          let tokens = token.split(/\s*\|\s*/);
          let selector = '{{3}}';
          if ( selector === '' || selector === '{{3}}' ) {
              selector = `[${tokens.join('],[')}]`;
          }
          let stattr = (ev) => {
              if (ev) {
                        removeEventListener(ev.type, stattr, true);
              }
              try {
                    let nodes = document.querySelectorAll(selector);
                    for (let node of nodes) {
                        for (let attr of tokens) {
                            node.setAttribute(attr, '{{2}}');
                        }
                    }
              } catch(ex) {
              }
          };
          if (document.readyState === 'loading' || document.readyState === 'interactive' || document.readyState === 'complete') {
                   addEventListener('DOMContentLoaded', stattr, true);
          } else {
                   stattr();
          }
})();

# element-setAttribute-onload
# example.com##+js(eset-attr, preload, none, video)
eset-attr.js application/javascript
(() => {
	'use strict';
	let token = '{{1}}';
	if (token === '' || token === '{{1}}') { return; }
	let tokens = token.split(/\s*\|\s*/);
	let selector = '{{3}}';
	if (selector === '' || selector === '{{3}}') {
	    selector = `[${tokens.join('],[')}]`;
	}
	let setattr = () => {
		let elements = document.querySelectorAll(selector);
		for ( let element of elements ) {
			for (let attr of tokens) {
		      		element.setAttribute(attr, '{{2}}');
			}	
		}      
	};
	if (document.readyState === 'loading' || document.readyState === 'interactive' || document.readyState === 'complete') {
		addEventListener('load', setattr);
	} else {
		setattr();
	}
})();

# element-toggleAttribute-DOMContentLoaded
# example.com##+js(tog-attr, preload, video)
tog-attr.js application/javascript
(() => {
          'use strict';
          let token = '{{1}}';
          if ( token === '' || token === '{{1}}' ) { return; }
          let tokens = token.split(/\s*\|\s*/);
          let selector = '{{2}}';
          if ( selector === '' || selector === '{{2}}' ) {
              selector = `[${tokens.join('],[')}]`;
          }
          let togattr = (ev) => {
              if (ev) {
                        window.removeEventListener(ev.type, togattr, true);
              }
              try {
                    let nodes = document.querySelectorAll(selector);
                    for (let node of nodes) {
                        for (let attr of tokens) {
                            node.toggleAttribute(attr);
                        }
                    }
              } catch(ex) {
              }
          };
          if (document.readyState === 'loading' || document.readyState === 'interactive' || document.readyState === 'complete') {
                   addEventListener('DOMContentLoaded', togattr, true);
          } else {
                   togattr();
          }
})();

# element-toggleAttribute-onload
# example.com##+js(etog-attr, autoplay, video)
etog-attr.js application/javascript
(() => {
	'use strict';
	let token = '{{1}}';
	if (token === '' || token === '{{1}}') { return; }
	let tokens = token.split(/\s*\|\s*/);
	let selector = '{{2}}';
	if (selector === '' || selector === '{{2}}') {
	    selector = `[${tokens.join('],[')}]`;
	}
	let togattr = () => {
		let elements = document.querySelectorAll(selector);
		for ( let element of elements ) {
			for (let attr of tokens) {
		      		element.toggleAttribute(attr);
			}	
		}      
	};
	if (document.readyState === 'loading' || document.readyState === 'interactive' || document.readyState === 'complete') {
		addEventListener('load', togattr);
	} else {
		togattr();
	}
})();

# set-property on DOMContentLoaded
# example.com##+js(set-prop, example, example)
set-prop.js application/javascript
(() => {
		    'use strict';
		    let chain = '{{1}}';
		    let prop = '{{2}}';
		    if ( chain === '' || chain === '{{1}}' ) {
			return;
		    }
		    let set = () => {
			let owner = window;
			chain = chain.split('.');
			for ( let i = 0; i < chain.length - 1; i++ ) {
			    owner = owner[chain[i]];
			}
			owner[chain[chain.length - 1]] = prop;
		    };
		    if (document.readyState === 'interactive' || document.readyState === 'complete') {
			     set();
		    } else {
			     addEventListener('DOMContentLoaded', set);
		    }
})();

# cookie-setter
# example.com##+js(cookie-set, name, value, age)
cookie-set.js application/javascript
(() => {
	     'use strict';
	     document.cookie = '{{1}}={{2}}; max-age={{3}}; secure; path=/;';
})();		

# window.open.defuser-alternative
# example.com##+js(wopen)
wopen.js application/javascript
(() => {
	     'use strict';
	      window.open = () => {};
	      this.open = () => {};
	      parent.open = () => {};
	      window.opener = () => {};
})();

# element-clicker
# example.com##+js(eclick, #example)
eclick.js application/javascript
(() => {
	'use strict';
	let selector = '{{1}}';
	if ( selector === '' || selector === '{{1}}' ) {
		return;
	}
	let click = () => {
		let element = document.querySelector(selector);
		element.click();
	};
	if ( document.readyState === 'interactive' || document.readyState === 'complete' ) {
		click();
	} else {
		addEventListener('DOMContentLoaded', click);
	}
})();

# element-clicker-onload
# example.com##+js(eclick2, .example)
eclick2.js application/javascript
(() => {
		'use strict';
		 let selector = '{{1}}';
			if ( selector === '' || selector === '{{1}}' ) {
			return;
		}
		 let click = () => {
			let element = document.querySelector(selector);
			element.click();
		};
		if (document.readyState === 'complete') {
			click();
		} else {
			addEventListener('load', click);
		}
})();

# background-image-setter
# example.com##+js(bis, body, url(https://example.com/example.jpg))
bis.js application/javascript
(() => {
		'use strict';
		 let selector = '{{1}}';
			if ( selector === '' || selector === '{{1}}' ) {
			return;
		}
		 let bis = () => {
			let element = document.querySelector(selector);
			element.style.backgroundImage = '{{2}}';
		};
		if (document.readyState === 'loading') {
			addEventListener('DOMContentLoaded', bis);
		} else {
			bis();
		}
})();

# element-focusser
# example.com##+js(efocus, #element)
efocus.js application/javascript
(() => {
		'use strict';
		let selector = '{{1}}';
		if ( selector === '' || selector === '{{1}}' ) {
			return;
		}
		let focus = () => {
			let element = document.querySelector(selector);
			element.focus();
		};
		if ( document.readyState === 'interactive' || document.readyState === 'complete' ) {
			addEventListener('DOMContentLoaded', focus);
		} else {
			focus();
		}
})();

# element-replacer
# example.com##+js(ereplace, .element)
ereplace.js application/javascript
(() => {
		'use strict';
		let selector = '{{1}}';
		if ( selector === '' || selector === '{{1}}' ) {
			return;
		}
		let div = document.createElement('div');
		let replace = () => {
			let elements = document.querySelectorAll(selector);
			for ( let element of elements ) {
			      element.replaceWith(div);
			}      
		};
		if (document.readyState === 'interactive' || document.readyState === 'complete') {
			replace();
		} else {
			addEventListener('DOMContentLoaded', replace);
		}
})();

# element-replacer-onload
# example.com##+js(ereplace2, #element)
ereplace2.js application/javascript
(() => {
		'use strict';
		let selector = '{{1}}';
		if ( selector === '' || selector === '{{1}}' ) {
			return;
		}
		let div = document.createElement('div');
		let replace = () => {
			let elements = document.querySelectorAll(selector);
			for ( let element of elements ) {
			      element.replaceWith(div);
			}      
		};
		if (document.readyState === 'complete') {
			replace();
		} else {
			addEventListener('load', replace);
		}
})();

# variable-value-setter
# example.com##+js(set-value, property, value)
set-value.js application/javascript
(() => {
		'use strict';
		let name = '{{1}}';
		let data = '{{2}}';
		let Object = window.Object.bind(window);
		let descriptor = window.Object.getOwnPropertyDescriptor.bind(window.Object);
		let defineProperty = window.Object.defineProperty.bind(window.Object);
		let finalSetter = () => { };
		let finalGetter = () => { return data; };
		let trustedSetters = {};
		let makeProxy = (parent, chain) => {
			let i = chain.indexOf('.');
			if ( i === -1 ) {
				let current = descriptor(parent, chain);
				if ( !current || current.set !== finalSetter || current.get !== finalGetter ) {
					defineProperty(parent, chain, {
						configurable: false,
						set: finalSetter,
						get: finalGetter
					});
				}
			} else {
				let name = chain.slice(0, i);
				let val = parent[name];
				chain = chain.substring(i + 1);
				if ( val instanceof Object ) {
					makeProxy(val, chain);
				} else {
					let current = descriptor(parent, name);
					if ( !current || !trustedSetters[chain] || trustedSetters[chain] !== current.set ) {
						let setter = (value) => {
							if ( value instanceof Object ) {
								try {
									makeProxy(value, chain);
									val = value;
								} catch ( err ) { }
							}
						};
						trustedSetters[chain] = setter;
						defineProperty(parent, name, {
							configurable: false,
							set: setter,
							get: () => { return val; }
						});
					}
				}
			}
		};
		let define = (payload) => {
			data = payload;
			try {
				makeProxy(window, name);
			} catch ( err ) { }
		};
		switch ( data ) {
			case 'noopFunc':	return define(() => { });
			case 'trueFunc':        return define(() => { return true; });
			case 'falseFunc':       return define(() => { return false; });
			case 'nullFunc':        return define(() => { return null; });
			case 'unFunc':          return define(() => { return undefined; });
			case 'oneFunc':         return define(() => { return 1; });
			case 'zeFunc':		return define(() => { return 0; });
			default:		return define(data);
		}
})();

# remove-property on DOMContentLoaded
# example.com##+js(remove-prop, foo.bar)
remove-prop.js application/javascript
(() => {
	      'use strict';
  	      let remove = () => {
                  delete {{1}}
              };
              if (document.readyState === 'interactive' || document.readyState === 'complete') {
                 	remove();
              } else {
                	addEventListener('DOMContentLoaded', remove);
              }
})();

# element-adder
# example.com##+js(eaddr, #element, block)
eaddr.js application/javascript
(() => {
		'use strict';
		let identifier = '{{1}}';
		let element = document.createElement('div');
		if ( identifier.charAt(0) === '#' ) {
			element.id = identifier.substring(1);
		} else if ( identifier.charAt(0) === '.' ) {
			element.className = identifier.substring(1);
		} else {
			return;
		}	
		element.style.display = '{{2}}';
		document.documentElement.appendChild(element);
})();

# element-remover-onload
# example.com##+js(eremove2, .div)
eremove2.js application/javascript
(() => {
		'use strict';
		let selector = '{{1}}';
		if ( selector === '' || selector === '{{1}}' ) {
			return;
		}
		let rm = () => {
			let elements = document.querySelectorAll(selector);
			for (let element of elements) {
				element.remove();
			}		
		};
		if ( document.readyState === 'complete' ) {
			rm();
		} else {
			addEventListener('load', rm);
		}
})();

# strip-queries from URLs
# example.com##+js(query-stripper, /\?fbclid=\w+/)
query-stripper.js application/javascript
(() => {
		'use strict';
		let query = '{{1}}';
		if ( query === '' || query === '{{1}}' ) {
			query = '.?';
		} else if ( query.slice(0,1) === '/' && query.slice(-1) === '/' ) {
			query = query.slice(1,-1);
		} else {
			query = query.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
		}
		query = new RegExp(query);
		if (location.href.search(query) !== -1) {
			let url = window.location.href;
			let strippedurl = url.replace(query, '');
			location.href = strippedurl;
		}
})();
