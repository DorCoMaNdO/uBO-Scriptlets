# Collection of scriptlets to be used for injection/redirection on specific domains.

# response-header-setter
# example.com##+js(set-respheader, Cross-Origin-Resource-Policy, same-site)
set-respheader.js application/javascript
(() => {
	'use strict';
	const docu = document;
	if (!docu.head) { return; }
	const meta = docu.createElement('meta');
	meta.setAttribute('http-equiv', '{{1}}');
	meta.setAttribute('content', '{{2}}');
	docu.head.appendChild(meta);
})();

# readOnly-property-setter
# example.com##+js(ro, canAds, true)
ro.js application/javascript
(() => {
		let prop = '{{1}}';
		if ( prop === '' || prop === '{{1}}' ) {
			return;
		}
		let data = '{{2}}';
		const Object = window.Object.bind(window);
		const descriptor = window.Object.getOwnPropertyDescriptor.bind(window.Object);
		const defineProperty = window.Object.defineProperty.bind(window.Object);
		const finalSetter = () => { };
		const finalGetter = () => { return data; };
		const trustedSetters = { };
		const makeProxy = (parent, chain) => {
			const i = chain.indexOf('.');
			if ( i === -1 ) {
				let current = descriptor(parent, chain);
				if ( !current || current.set !== finalSetter || current.get !== finalGetter ) {
					defineProperty(parent, chain, {
						configurable: false,
						set: finalSetter,
						get: finalGetter
					});
				}
			} else {
				let prop = chain.slice(0, i);
				let val = parent[prop];
				chain = chain.substring(i + 1);
				if ( val instanceof Object ) {
					makeProxy(val, chain);
				} else {
					let current = descriptor(parent, prop);
					if ( !current || !trustedSetters[chain] || trustedSetters[chain] !== current.set ) {
						const setter = value => {
							if ( value instanceof Object ) {
								try {
									makeProxy(value, chain);
									val = value;
								} catch (ex) { }
							}
						};
						trustedSetters[chain] = setter;
						defineProperty(parent, prop, {
							configurable: false,
							set: setter,
							get: () => { return val; }
						});
					}
				}
			}
		};
		const define = payload => {
			data = payload;
			try {
				makeProxy(window, prop);
			} catch { }
		};
		switch (data) {
			default: 		return define(data);
		}
})();		

# element-remover
# example.com##+js(eremove, #example)
eremove.js application/javascript
(() => {
		'use strict';
		const selector = '{{1}}';
		if ( selector === '' || selector === '{{1}}' ) {
			return;
		}
		const rm = () => {
		 			   const elements = document.querySelectorAll(selector);
					   try {
						  for (const element of elements) {
							element.remove();
					       	  }
					   } catch { }
		};
		const observer = new MutationObserver(rm);
    		observer.observe(document.documentElement, { childList: true, subtree: true });
})();

# attribute-remover
# example.com##+js(rm-attr, allow, iframe)
rm-attr.js application/javascript
(() => {
		    'use strict';
		    const needle = '{{1}}';
		    if ( needle === '' || needle === '{{1}}' ) { 
		    		return; 
		    }
		    const needles = needle.split(/\s*\|\s*/);
		    let selector = '{{2}}';
		    if ( selector === '' || selector === '{{2}}' ) {
			selector = `[${tokens.join('],[')}]`;
		    }
		    const rmattr = () => {
						const nodes = document.querySelectorAll(selector);
						try {
			    				for ( const node of nodes ) {
								for ( const attr of needles ) {
				    					node.removeAttribute(attr);
								}
			    				}
						} catch(ex) { }
		    };
		    const observer = new MutationObserver(rmattr);
    		    observer.observe(document.documentElement, { childList: true, subtree: true });
})();

# hyperlink-setter
# example.com##+js(hyperlink-setter)
hyperlink-setter.js application/javascript
(() => {
		'use strict';
		const linksetter = ev => { 
					     if (ev) { window.removeEventListener(ev.type, linksetter, true); }
					     const hosts = document.getElementsByClassName('host');
					     try {
						  	for (const host of hosts) {
								host.setAttribute('href', host.getAttribute('link'));
						   }
					     } catch (ex) { }
		};
		if (document.readyState === 'loading') {
			window.addEventListener('DOMContentLoaded', linksetter, true);
		} else {
			linksetter();
		}
})();

# script-tag-remover
# example.com##+js(remove-inline-script, /adblock|adsense/)
remove-inline-script.js application/javascript
(() => { 
          'use strict';
	  let needle = '{{1}}';
          if ( needle === '' || needle === '{{1}}' ) {
              needle = '.?';
          } else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
              needle = needle.slice(1,-1);
          } else {
              needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
          }
          needle = new RegExp(needle);
          const jsnode = ev => {
                                        if (ev) { window.removeEventListener(ev.type, jsnode, true); }
                                   	try {
                                          	const jss = document.querySelectorAll('script');
                                          	for (const js of jss) {
                                              		if (js.outerHTML.matchAll(needle)) {
                                                                	js.remove();
                                              		}			
                                          	}
                                   	} catch(ex) { }
          };
          if (document.readyState === 'loading') {
                   window.addEventListener('DOMContentLoaded', jsnode, true);
          } else {
                   jsnode();
          }
})();

# script-tag-remover-alternative
# example.com##+js(rm-js, /adblock|adsense/)
rm-js.js application/javascript
(() => {
		'use strict';
		let needle = '{{1}}';
		if ( needle === '' || needle === '{{1}}' ) {
			needle = '.?';
		} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
			needle = needle.slice(1,-1);
		} else {
			needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
		}
		needle = new RegExp(needle);
		const xhr = new XMLHttpRequest();
		xhr.open('GET', window.location.href, false);
		xhr.onload = () => {
			const html = xhr.response.replace(/<script\b[\s\S]*?<\/script>/g, script => {
			if (script.match(needle)) {
					return '';
			} else {
					return script;
				}
			});
			document.open();
			document.write(html);
			document.close();
		};
		xhr.send();
})();

# javascript-logger
# example.com##+js(js-logger)
js-logger.js application/javascript
(() => {
		'use strict';
		const logscripts = ev => {
						  if (ev) { window.removeEventListener(ev.type, logscripts, true); }
						  try {
							const scripts = document.querySelectorAll('script');
							const log = console.log.bind(console);
							for (const script of scripts) {
								if (script.outerHTML) {
									log('uBO: javascript("%s")', script.outerHTML);
								}	
							}
						  } catch(ex) { }
		};
		if (document.readyState === 'complete') {
			logscripts(); 
		} else {
			window.addEventListener('load', logscripts, true);
		}
})();

# style-tag-remover
# example.com##+js(remove-inline-style, /cookie-notice/)
remove-inline-style.js application/javascript
(() => { 
          'use strict';
	  let needle = '{{1}}';
          if ( needle === '' || needle === '{{1}}' ) {
              needle = '.?';
          } else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
              needle = needle.slice(1,-1);
          } else {
              needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
          }
          needle = new RegExp(needle);
          const cssnode = ev => {
                                         if (ev) { window.removeEventListener(ev.type, cssnode, true); }
                                   	 try {
                                          	const css = document.querySelectorAll('style');
                                          	for (const cs of css) {
                                              		if (cs.outerHTML.matchAll(needle)) {
								cs.remove();
                                              		}			
                                          	}
                                   	 } catch (ex) { }
          };
          if (document.readyState === 'loading') {
                   window.addEventListener('DOMContentLoaded', cssnode, true);
          } else {
                   cssnode();
          }
})();

# style-tag-remover-alternative
# example.com##+js(rm-css, /cookie-notice/)
rm-css.js application/javascript
(() => {
		'use strict';
		let needle = '{{1}}';
		if ( needle === '' || needle === '{{1}}' ) {
			needle = '.?';
		} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
			needle = needle.slice(1,-1);
		} else {
			needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
		}
		needle = new RegExp(needle);
		const xhr = new XMLHttpRequest();
		xhr.open('GET', window.location.href, false);
		xhr.onload = () => {
			const html = xhr.response.replace(/<style\b[\s\S]*?<\/style>/g, style => {
			if (style.match(needle)) {
					return '';
			} else {
					return style;
				}
			});
			document.open();
			document.write(html);
			document.close();
		};
		xhr.send();
})();

# cascading-stylesheets-logger
# example.com##+js(css-logger)
css-logger.js application/javascript
(() => {
		'use strict';
		const logstylesheets = ev => {
						if (ev) { window.removeEventListener(ev.type, logstylesheets, true); }
						try {
							const stylesheets = document.querySelectorAll('style');
							const log = console.log.bind(console);
							for (const stylesheet of stylesheets) {
								if (stylesheet.outerHTML) {
									log('uBO: stylesheet("%s")', stylesheet.outerHTML);
								}	
							}
						} catch(ex) { }
		};
		if (document.readyState === 'complete') {
			logstylesheets();
		} else {
			window.addEventListener('load', logstylesheets, true);
		}
})();

# noscript-tag-remover
# example.com##+js(remove-inline-noscript, /text/)
remove-inline-noscript.js application/javascript
(() => { 
          'use strict';
	  let needle = '{{1}}';
          if ( needle === '' || needle === '{{1}}' ) {
              needle = '.?';
          } else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
              needle = needle.slice(1,-1);
          } else {
              needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
          }
          needle = new RegExp(needle);
          const nosnode = ev => {
                                         if (ev) { window.removeEventListener(ev.type, nosnode, true); }
                                   	 try {
                                          	const noss = document.querySelectorAll('noscript');
                                          	for (const nos of noss) {
                                              		if (nos.outerHTML.matchAll(needle)) {
                                                                	nos.remove();
                                              		}			
                                          	}
                                   	 } catch(ex) { }
          };
          if (document.readyState === 'loading') {
                   window.addEventListener('DOMContentLoaded', nosnode, true);
          } else {
                   nosnode();
          }
})();

# noscript-logger
# example.com##+js(noscript-logger)
noscript-logger.js application/javascript
(() => {
		'use strict';
		const lognoscripts = ev => {
					    if (ev) { window.removeEventListener(ev.type, lognoscripts, true); }
					    try {
						 	const noscripts = document.querySelectorAll('noscript');
						 	const log = console.log.bind(console);
						 	for (const noscript of noscripts) {
								if (noscript.outerHTML) {
									log('uBO: noscript("%s")', noscript.outerHTML);
								}	
						 	}
					    } catch(ex) { }
		};
		if (document.readyState === 'complete') {
			lognoscripts(); 
		} else {
			window.addEventListener('load', lognoscripts, true);
		}
})();

# frame-tag-remover
# example.com##+js(remove-inline-frame, /frame/)
remove-inline-frame.js application/javascript
(() => { 
          'use strict';
	  let needle = '{{1}}';
          if ( needle === '' || needle === '{{1}}' ) {
              needle = '.?';
          } else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
              needle = needle.slice(1,-1);
          } else {
              needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
          }
          needle = new RegExp(needle);
          const framenode = ev => {
                                           if (ev) { window.removeEventListener(ev.type, framenode, true); }
                                   	   try {
                                          	const frames = document.querySelectorAll('iframe');
                                          	for (const frame of frames) {
                                              		if (frame.outerHTML.matchAll(needle)) {
                                                                	frame.remove();
                                              		}			
                                          	}
                                   	   } catch(ex) { }
          };
          if (document.readyState === 'loading') {
                   window.addEventListener('DOMContentLoaded', framenode, true);
          } else {
                   framenode();
          }
})();

# link-tag-remover
# example.com##+js(remove-link, /prefetch|preload|prerender/)
remove-link.js application/javascript
(() => { 
          'use strict';
	  let needle = '{{1}}';
          if ( needle === '' || needle === '{{1}}' ) {
              needle = '.?';
          } else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
              needle = needle.slice(1,-1);
          } else {
              needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
          }
          needle = new RegExp(needle);
          const linknode = ev => {
                                          if (ev) { window.removeEventListener(ev.type, linknode, true); }
                                   	  try {
                                          	const links = document.querySelectorAll('link');
                                          	for (const link of links) {
                                              		if (link.outerHTML.matchAll(needle)) {
								link.remove();
                                              		}			
                                          	}
                                   	  } catch(ex) { }
          };
          if (document.readyState === 'loading') {
                   window.addEventListener('DOMContentLoaded', linknode, true);
          } else {
                   linknode();
          }
})();

# meta-tag-remover
# example.com##+js(remove-meta, /refresh|referrer/)
remove-meta.js application/javascript
(() => { 
          'use strict';
	  let needle = '{{1}}';
          if ( needle === '' || needle === '{{1}}' ) {
              needle = '.?';
          } else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
              needle = needle.slice(1,-1);
          } else {
              needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
          }
          needle = new RegExp(needle);
          const metanode = ev => {
                                          if (ev) { window.removeEventListener(ev.type, metanode, true); }
                                   	  try {
                                          	const metas = document.querySelectorAll('meta');
                                          	for (const meta of metas) {
                                              		if (meta.outerHTML.matchAll(needle)) {
                                                                	meta.remove();
                                              		}			
                                          	}
                                   	  } catch(ex) { }
          };
          if (document.readyState === 'loading') {
                   window.addEventListener('DOMContentLoaded', metanode, true);
          } else {
                   metanode();
          }
})();

# element-setAttribute
# example.com##+js(set-attr, preload, none, video)
set-attr.js application/javascript
(() => {
          'use strict';
          const token = '{{1}}';
          if ( token === '' || token === '{{1}}' ) { return; }
          const tokens = token.split(/\s*\|\s*/);
          let selector = '{{3}}';
          if ( selector === '' || selector === '{{3}}' ) {
              selector = `[${tokens.join('],[')}]`;
          }
          const stattr = ev => {
              				if (ev) { window.removeEventListener(ev.type, stattr, true); }
              				try {
                    				const nodes = document.querySelectorAll(selector);
                    				for (const node of nodes) {
                        				for (const attr of tokens) {
                            					node.setAttribute(attr, '{{2}}');
                        				}
                    				}
              				} catch(ex) { }
          };
          if (document.readyState === 'loading') {
                   window.addEventListener('DOMContentLoaded', stattr, true);
          } else {
                   stattr();
          }
})();

# element-toggleAttribute-DOMContentLoaded
# example.com##+js(tog-attr, preload, video)
tog-attr.js application/javascript
(() => {
          'use strict';
          const token = '{{1}}';
          if ( token === '' || token === '{{1}}' ) { return; }
          const tokens = token.split(/\s*\|\s*/);
          let selector = '{{2}}';
          if ( selector === '' || selector === '{{2}}' ) {
              selector = `[${tokens.join('],[')}]`;
          }
          const togattr = ev => {
              				 if (ev) { window.removeEventListener(ev.type, togattr, true); }
            				 try {
                    				const nodes = document.querySelectorAll(selector);
					    	for (const node of nodes) {
							for (const attr of tokens) {
							    	node.toggleAttribute(attr);
							}
						}
					 } catch(ex) { }
          };
          if (document.readyState === 'loading') {
                   window.addEventListener('DOMContentLoaded', togattr, true);
          } else {
                   togattr();
          }
})();

# set-property on DOMContentLoaded
# example.com##+js(set-prop, example, example)
set-prop.js application/javascript
(() => {
		    'use strict';
		    let chain = '{{1}}';
		    const prop = '{{2}}';
		    if ( chain === '' || chain === '{{1}}' ) {
			return;
		    }
		    const set = ev => {
						if (ev) { window.removeEventListener(ev.type, set, true); }
						try {
							const owner = window;
							chain = chain.split('.');
							for (const i = 0; i < chain.length - 1; i++) {
			    						owner = owner[chain[i]];
							}
							owner[chain[chain.length - 1]] = prop;
						} catch(ex) { }
		    };
		    if (document.readyState === 'loading') {
			     window.addEventListener('DOMContentLoaded', set, true);
		    } else {
			     set();
		    }
})();

# cookie-setter
# example.com##+js(cookie-set, name, value, age)
cookie-set.js application/javascript
(() => {
		'use strict';
		const cs = ev => {
					if (ev) { window.removeEventListener(ev.type, cs, true); }
					try {
						document.cookie = '{{1}}={{2}}; max-age={{3}}; secure; path=/;';
					} catch (ex) { }
	   	};
	   	if (document.readyState === 'loading') {
		    	 window.addEventListener('DOMContentLoaded', cs, true);
	   	} else {
		    	 cs();
	   	}
})();	

# element-replacer
# example.com##+js(ereplace, .element)
ereplace.js application/javascript
(() => {
		'use strict';
		const selector = '{{1}}';
		if ( selector === '' || selector === '{{1}}' ) {
			return;
		}
		const div = document.createElement('div');
		const replace = ev => {
						if (ev) { window.removeEventListener(ev.type, replace, true); }
						try {
							const elements = document.querySelectorAll(selector);
							for ( const element of elements ) {
			      					element.replaceWith(div);
							}
						} catch(ex) { }
		};
		if (document.readyState === 'loading) {
			 window.addEventListener('DOMContentLoaded', replace, true);
		} else {
			 replace();
		}
})();

# prune-property
# example.com##+js(remove-prop, foo.bar)
remove-prop.js application/javascript
(() => {
	      'use strict';
  	      const remove = ev => {
	      				    if (ev) { window.removeEventListener(ev.type, remove, true); }
					    try {
                  				  delete {{1}}
					    } catch(ex) { }
              };
              if (document.readyState === 'interactive') {
                       remove(); 
              } else {
                       window.addEventListener('DOMContentLoaded', remove, true);
              }
})();

# DOM-element-creator
# example.com##+js(add-elem, #id|.className, block)
add-elem.js application/javascript
(() => {
		'use strict';
		const identifier = '{{1}}';
		if (identifier === '' || identifier === '{{1}}') { 
	   		return; 
	        }
		const identifiers = identifier.split(/\s*\|\s*/);
		const ea = ev => {
					if (ev) { window.removeEventListener(ev.type, ea, true); }
					try {
						const element = document.createElement('div');
						for (const identifieradder of identifiers) {
							if (identifieradder.charAt(0) === '#') {
								 element.id = identifieradder.substring(1);
							} else if (identifieradder.charAt(0) === '.') {
								 element.className = identifieradder.substring(1);
							} else { return; }	 
						}
						element.style.setProperty('display', '{{2}}', '{{3}}');
						document.body.appendChild(element);
					} catch (ex) { }
	   	};
	   	if (document.readyState === 'loading') {
		    	 window.addEventListener('DOMContentLoaded', ea, true);
	   	} else {
		    	 ea();
	   	}
})();

# url-query-remover
# example.com##+js(query-stripper, fbclid|gclid)
query-stripper.js application/javascript
(() => {
		'use strict';
		const needle = '{{1}}';
		if ( needle === '' || needle === '{{1}}' ) { 
	   		return; 
	   	}			
	   	const needles = needle.split(/\s*\|\s*/);
		const querystripper = ev => {
						if (ev) { window.removeEventListener(ev.type, querystripper, true); }
						try {
			  		      		const url = new URL(location.href);
					      		const params = new URLSearchParams(url.search.slice(1));
					      		for (const needleremover of needles) {
					      			if (params.has(needleremover)) {
									url.searchParams.delete(needleremover);
			       						window.location.href = url;
								}
			  		      		}		
						} catch (ex) { }
		};		    
		if (document.readyState === 'loading') {
		    	 window.addEventListener('DOMContentLoaded', querystripper, true);
		} else {
		     	 querystripper();
		}
})();

# div-tag-remover
# example.com##+js(remove-div-tag, /adblock|googad/)
remove-div-tag.js application/javascript
(() => { 
          'use strict';
	  let needle = '{{1}}';
          if ( needle === '' || needle === '{{1}}' ) {
              needle = '.?';
          } else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
              needle = needle.slice(1,-1);
          } else {
              needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
          }
          needle = new RegExp(needle);
          const divnode = () => {
                                        try {
                                          	const divs = document.querySelectorAll('div');
                                          	for (const div of divs) {
                                              		if (div.outerHTML.match(needle)) {
								div.remove();
                                              		}			
                                          	}
                                   	} catch(ex) { }
          };
          const observer = new MutationObserver(divnode);
	  observer.observe(document.documentElement, { childList: true, subtree: true });
})();

# div-tag-logger
# example.com##+js(div-logger)
div-logger.js application/javascript
(() => {
		'use strict';
		const logdivs = ev => {
					  if (ev) { window.removeEventListener(ev.type, logdivs, true); }
					  try {
						const divs = document.querySelectorAll('div');
						const log = console.log.bind(console);
						for (const div of divs) {
							if (div.outerHTML) {
								log('uBO: div("%s")', div.outerHTML);
							}	
						}
					  } catch(ex) { }
		};
		if (document.readyState === 'complete') {
			logdivs(); 
		} else {
			window.addEventListener('load', logdivs, true);
		}
})();

# URL-Redirector
# example.com##+js(url-redirector, link|url)
url-redirector.js application/javascript
(() => {
		'use strict';
		const needle = '{{1}}';
		if ( needle === '' || needle === '{{1}}' ) { 
				return; 
	   	}			
	   	const needles = needle.split(/\s*\|\s*/);
		const ur = ev => {
					if (ev) { window.removeEventListener(ev.type, ur, true);}
					try {
			  			const url = new URL(location.href);
						const params = new URLSearchParams(url.search.slice(1));
						for (const needleremover of needles) {
							if (params.has(needleremover)) {
								const value = params.get(needleremover);
								window.location.href = value;
							}
						}		
					} catch (ex) { }
		};		    
		if (document.readyState === 'loading') {
				window.addEventListener('DOMContentLoaded', ur, true);
		  } else {
				ur();
		  }
})();

# innerHTML-setter
# example.com##+js(set-innerHTML, #id, <span class="btext">Download</span>)
set-innerHTML.js application/javascript
(() => {
		'use strict';
		const selector = '{{1}}';
		if ( selector === '' || selector === '{{1}}' ) {
			return;
		}
		const ihs = ev => {
		 			   if (ev) { window.removeEventListener(ev.type, ihs, true); }
					   const elements = document.querySelectorAll(selector);
					   try {
						  for (const element of elements) {
							element.innerHTML = '{{2}}';
					       	  }
					   } catch(ex) { }
		};
		if (document.readyState === 'loading') {
			window.addEventListener('DOMContentLoaded', ihs, true);
		} else {
			ihs();
		}
})();
