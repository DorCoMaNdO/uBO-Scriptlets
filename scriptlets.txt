# Collection of scriptlets to be used for injection/redirection on specific domains.
#
# - Each distinct resource entry is separated by an empty line.
# - The first line in a resource entry is: token mime-type[;encoding]
# - All following lines are the data. An empty line signals the end of the
#   data.
#
# If the encoding is absent, the data will be converted to base64, and the
# encoding will be set to `;base64`.

# eval-logger
# example.com##+js(eval-logger.js)
eval-logger.js application/javascript
(function() {
	let z = window.eval,
		log = console.log.bind(console);
	window.eval = function(a) {
		log('uBO: eval("%s")', String(a));
		return z.apply(this, arguments);
	}.bind(window);
})();

# response-header-setter
# example.com##+js(set-respheader.js, Cross-Origin-Resource-Policy, same-site)
set-respheader.js application/javascript
(function() {
	let docu = document;
	if (!docu.head) { return; }
	let meta = docu.createElement('meta');
	meta.setAttribute('http-equiv', '{{1}}');
	meta.setAttribute('content', '{{2}}');
	docu.head.appendChild(meta);
})();

# referrer-policy-setter
# example.com##+js(set-refpolicy.js, no-referrer)
set-refpolicy.js application/javascript
(function() {
	let docu = document;
	if (!docu.head) { return; }
	let meta = docu.createElement('meta');
	meta.setAttribute('name', 'referrer');
	meta.setAttribute('content', '{{1}}');
	docu.head.appendChild(meta);
})();

# element-remover
# example.com##+js(eremove.js, #example)
eremove.js application/javascript
(function() {
	let selector = '{{1}}';
	if ( selector === '' || selector === '{{1}}' ) {
		return;
	}
	let remove = function() {
		let elements = document.querySelectorAll(selector);
		for ( let element of elements ) {
		      element.remove();
		}      
	};
	if (document.readyState === 'interactive' || document.readyState === 'complete' ) {
		remove();
	} else {
		window.addEventListener('DOMContentLoaded', remove);
	}
})();

# inline-script-remover
# example.com##+js(remove-inline-script.js, adblock)
remove-inline-script.js application/javascript
(function() {		
		let needle = '{{1}}';
		if ( needle === '' || needle === '{{1}}' ) {
			needle = '.?';
		} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
			needle = needle.slice(1,-1);
		} else {
			needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
		}
		needle = new RegExp(needle);
		let xhr = new XMLHttpRequest();
		xhr.open('GET', window.location.href, false);
		xhr.onload = () => {
			let html = xhr.response.replace(/<script\b[\s\S]*?<\/script>/g, script => {
			if (script.match(needle)) {
					return '';
			} else {
					return script;
				}
			});
			document.open();
			document.write(html);
			document.close();
		};
		xhr.send();
})();

# inline-noscript-remover
# example.com##+js(remove-inline-noscript.js, text)
remove-inline-noscript.js application/javascript
(function() {		
		let needle = '{{1}}';
		if ( needle === '' || needle === '{{1}}' ) {
			needle = '.?';
		} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
			needle = needle.slice(1,-1);
		} else {
			needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
		}
		needle = new RegExp(needle);
		let xhr = new XMLHttpRequest();
		xhr.open('GET', window.location.href, false);
		xhr.onload = () => {
			let html = xhr.response.replace(/<noscript\b[\s\S]*?<\/noscript>/g, noscript => {
			if (noscript.match(needle)) {
					return '';
			} else {
					return noscript;
				}
			});
			document.open();
			document.write(html);
			document.close();
		};
		xhr.send();
})();

# inline-frame-remover
# example.com##+js(remove-inline-frame.js, frame)
remove-inline-frame.js application/javascript
(function() {		
		let needle = '{{1}}';
		if ( needle === '' || needle === '{{1}}' ) {
			needle = '.?';
		} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
			needle = needle.slice(1,-1);
		} else {
			needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
		}
		needle = new RegExp(needle);
		let xhr = new XMLHttpRequest();
		xhr.open('GET', window.location.href, false);
		xhr.onload = () => {
			let html = xhr.response.replace(/<iframe\b[\s\S]*?<\/iframe>/g, frame => {
			if (frame.match(needle)) {
					return '';
			} else {
					return frame;
				}
			});
			document.open();
			document.write(html);
			document.close();
		};
		xhr.send();
})();

# inline-style-remover
# example.com##+js(remove-inline-style.js, notice)
remove-inline-style.js application/javascript
(function() {		
		let needle = '{{1}}';
		if ( needle === '' || needle === '{{1}}' ) {
			needle = '.?';
		} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
			needle = needle.slice(1,-1);
		} else {
			needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
		}
		needle = new RegExp(needle);
		let xhr = new XMLHttpRequest();
		xhr.open('GET', window.location.href, false);
		xhr.onload = () => {
			let html = xhr.response.replace(/<style\b[\s\S]*?<\/style>/g, style => {
			if (style.match(needle)) {
					return '';
			} else {
					return style;
				}
			});
			document.open();
			document.write(html);
			document.close();
		};
		xhr.send();
})();

# autoplay-blocker
# example.com##+js(autoplay-defuser.js)
autoplay-defuser.js application/javascript
(function() {
	      let autoplay = function() {  
		  	let media = HTMLMediaElement;
			media.autoplay = 'false'; 
	      };
	      if (document.readyState === 'interactive' || document.readyState === 'complete' ) {
		      autoplay();
	      } else {
		      window.addEventListener('DOMContentLoaded', autoplay);
	      }
})();

# element-setAttribute-onload
# example.com##+js(preload, none, video)
set-attr.js application/javascript
(function() {
	let attr = '{{1}}';
	if ( attr === '' || attr === '{{1}}' ) { return; }
	let attrs = attr.split(/\s*\|\s*/);
	let selector = '{{3}}';
	if ( selector === '' || selector === '{{3}}' ) {
		selector = '[' + attrs.join('],[') + ']';
	}
	let stattr = function(ev) {
		if ( ev ) { window.removeEventListener(ev.type, stattr, true); }
		try {
			let nodes = document.querySelectorAll(selector), i = nodes.length;
			while ( i-- ) {
				let node = nodes[i], j = attrs.length;
				while ( j-- ) { node.setAttribute(attrs[j], '{{2}}'); }
			}
		} catch(ex) {
		}
	};
	if (document.readyState === '{{4}}') {
		window.addEventListener('load', stattr);
	} else {
		stattr();
	}
})();

# element-setAttribute-DOMContentLoaded
# example.com##+js(eset-attr.js, video, autoplay, none, loading)
eset-attr.js application/javascript
(function() {
	let selector = '{{1}}';
	if ( selector === '' || selector === '{{1}}' ) {
		return;
	}
	let setattr = function() {
		let elements = document.querySelectorAll(selector);
		for ( let element of elements ) {
		      element.setAttribute('{{2}}','{{3}}');
		}      
	};
	if (document.readyState === '{{4}}') {
		window.addEventListener('DOMContentLoaded', setattr);
	} else {
		setattr();
	}
})();

# element-toggleAttribute-DOMContentLoaded
# example.com##+js(tog-attr.js, preload, video)
tog-attr.js application/javascript
(function() {
	let attr = '{{1}}';
	if ( attr === '' || attr === '{{1}}' ) { return; }
	let attrs = attr.split(/\s*\|\s*/);
	let selector = '{{2}}';
	if ( selector === '' || selector === '{{2}}' ) {
		selector = '[' + attrs.join('],[') + ']';
	}
	let togattr = function(ev) {
		if ( ev ) { window.removeEventListener(ev.type, togattr, true); }
		try {
			let nodes = document.querySelectorAll(selector), i = nodes.length;
			while ( i-- ) {
				let node = nodes[i], j = attrs.length;
				while ( j-- ) { node.toggleAttribute(attrs[j]); }
			}
		} catch(ex) {
		}
	};
	if ( document.readyState === 'loading' || document.readyState === 'interactive' ) {
		window.addEventListener('DOMContentLoaded', togattr);
	} else {
		togattr();
	}
})();

# element-toggleAttribute-onload
# example.com##+js(tog-attr.js, video, autoplay)
etog-attr.js application/javascript
(function() {
	let selector = '{{1}}';
	if ( selector === '' || selector === '{{1}}' ) {
		return;
	}
	let togattr = function() {
		let elements = document.querySelectorAll(selector);
		for ( let element of elements ) {
		      element.toggleAttribute('{{2}}');
		}      
	};
	if (document.readyState === 'loading' || document.readyState === 'interactive' ) {
		window.addEventListener('load', togattr);
	} else {
		togattr();
	}
})();

# set-property on DOMContentLoaded
# example.com##+js(set-prop.js, example, example)
set-prop.js application/javascript
(function() {
	    let chain = '{{1}}';
	    let prop = '{{2}}';
	    if ( chain === '' || chain === '{{1}}' ) {
		return;
	    }
	    let set = function() {
		let owner = window;
		chain = chain.split('.');
		for ( let i = 0; i < chain.length - 1; i++ ) {
		    owner = owner[chain[i]];
		}
		owner[chain[chain.length - 1]] = prop;
	    };
	    if (document.readyState === 'interactive' || document.readyState === 'complete') {
			set();
	    	} else {
			addEventListener('DOMContentLoaded', set);
	    }
})();

# cookie-setter
# example.com##+js(cookie-set.js, name, value, age)
cookie-set.js application/javascript
(function () {
	     document.cookie = '{{1}}={{2}}; max-age={{3}}; secure; path=/;';
})();		

# window.open.defuser-alternative
# example.com##+js(wopen.js)
wopen.js application/javascript
(function () {
	      window.open = () => {};
	      this.open = () => {};
	      parent.open = () => {};
	      window.opener = () => {};
})();

# element-clicker
eclick.js application/javascript
(function() {
	let selector = '{{1}}';
	if ( selector === '' || selector === '{{1}}' ) {
		return;
	}
	let click = function() {
		let element = document.querySelector(selector);
		element.click();
	};
	if ( document.readyState === 'interactive' || document.readyState === 'complete' ) {
		click();
	} else {
		window.addEventListener('DOMContentLoaded', click);
	}
})();

# element-clicker-onload
eclick2.js application/javascript
(function() {
         let selector = '{{1}}';
 		if ( selector === '' || selector === '{{1}}' ) {
        	return;
    	}
    	 let click = function() {
        	let element = document.querySelector(selector);
        	element.click();
        };
    	if (document.readyState === 'complete') {
        	click();
	} else {
        	window.addEventListener('load', click);
    	}
})();

# background-image-setter
bis.js application/javascript
(function() {
         let selector = '{{1}}';
 		if ( selector === '' || selector === '{{1}}' ) {
        	return;
    	}
    	 let bis = function() {
        	let element = document.querySelector(selector);
        	element.style.backgroundImage = '{{2}}';
        };
    	if (document.readyState === 'loading') {
        	window.addEventListener('DOMContentLoaded', bis);
    	} else {
        	bis();
    	}
})();

# element-focusser
efocus.js application/javascript
(function() {
	let selector = '{{1}}';
	if ( selector === '' || selector === '{{1}}' ) {
		return;
	}
	let focus = function() {
		let element = document.querySelector(selector);
		element.focus();
	};
	if ( document.readyState === 'interactive' || document.readyState === 'complete' ) {
		window.addEventListener('DOMContentLoaded', focus);
	} else {
		focus();
	}
})();

# element-replacer
ereplace.js application/javascript
(function() {
	let selector = '{{1}}';
	if ( selector === '' || selector === '{{1}}' ) {
		return;
	}
	let div = document.createElement('div');
	let replace = function() {
		let elements = document.querySelectorAll(selector);
		for ( let element of elements ) {
		      element.replaceWith(div);
		}      
	};
	if (document.readyState === 'interactive' || document.readyState === 'complete') {
		replace();
	} else {
		window.addEventListener('DOMContentLoaded', replace);
	}
})();

# element-replacer-onload
ereplace2.js application/javascript
(function() {
	let selector = '{{1}}';
	if ( selector === '' || selector === '{{1}}' ) {
		return;
	}
	let div = document.createElement('div');
	let replace = function() {
		let elements = document.querySelectorAll(selector);
		for ( let element of elements ) {
		      element.replaceWith(div);
		}      
	};
	if (document.readyState === 'complete') {
		replace();
	} else {
		window.addEventListener('load', replace);
	}
})();

# variable-value-setter
set-value.js application/javascript
(function() {
	let name = '{{1}}';
	let data = '{{2}}';
	let Object = window.Object.bind(window);
	let descriptor = window.Object.getOwnPropertyDescriptor.bind(window.Object);
	let defineProperty = window.Object.defineProperty.bind(window.Object);
	let finalSetter = function() { };
	let finalGetter = function() { return data; };
	let trustedSetters = {};
	let makeProxy = function(parent, chain) {
		let i = chain.indexOf('.');
		if ( i === -1 ) {
			let current = descriptor(parent, chain);
			if ( !current || current.set !== finalSetter || current.get !== finalGetter ) {
				defineProperty(parent, chain, {
					configurable: false,
					set: finalSetter,
					get: finalGetter
				});
			}
		} else {
			let name = chain.slice(0, i);
			let val = parent[name];
			chain = chain.substring(i + 1);
			if ( val instanceof Object ) {
				makeProxy(val, chain);
			} else {
				let current = descriptor(parent, name);
				if ( !current || !trustedSetters[chain] || trustedSetters[chain] !== current.set ) {
					let setter = function(value) {
						if ( value instanceof Object ) {
							try {
								makeProxy(value, chain);
								val = value;
							} catch ( err ) { }
						}
					};
					trustedSetters[chain] = setter;
					defineProperty(parent, name, {
						configurable: false,
						set: setter,
						get: function() { return val; }
					});
				}
			}
		}
	};
	let define = function(payload) {
		data = payload;
		try {
			makeProxy(window, name);
		} catch ( err ) { }
	};
	switch ( data ) {
		case 'noopFunc':	return define(function() { });
		case 'trueFunc':        return define(function() { return true; });
		case 'falseFunc':       return define(function() { return false; });
		case 'nullFunc':        return define(function() { return null; });
		case 'unFunc':          return define(function() { return undefined; });
		case 'oneFunc':         return define(function() { return 1; });
		case 'zeFunc':		return define(function() { return 0; });
		default:		return define(data);
	}
})();

# property-remover on document.readyState
remove-prop.js application/javascript
(function() {
  	      let remove = function () {
                  delete {{1}}
              };
              if (document.readyState === 'interactive' || document.readyState === 'complete') {
                 	remove();
              } else {
                	window.addEventListener('DOMContentLoaded', remove);
              }
})();

# element-adder
eaddr.js application/javascript
(function() {
	let identifier = '{{1}}';
	let element = document.createElement('div');
	if ( identifier.charAt(0) === '#' ) {
		element.id = identifier.substring(1);
	} else if ( identifier.charAt(0) === '.' ) {
		element.className = identifier.substring(1);
	} else {
		return;
	}
	element.style.display = '{{2}}';
	document.documentElement.appendChild(element);
})();

# element-remover-onload
eremove2.js application/javascript
(function() {
	let selector = '{{1}}';
	if ( selector === '' || selector === '{{1}}' ) {
		return;
	}
	let remove = function() {
		let element = document.querySelectorAll(selector);
		element.remove();
	};
	if ( document.readyState === 'complete' ) {
		remove();
	} else {
		window.addEventListener('load', remove);
	}
})();

# strip-queries from URLs
query-stripper.js application/javascript
(function() {
		let query = '{{1}}';
		if (location.href.indexOf(query + '=') !== -1) {
			let url = new URL(location.href);
			url.searchParams.delete(query);
			window.location.href = url;
		}
})();

# window.alert-defuser
alt.js application/javascript
(function() {
	let needle = '{{1}}';
	if ( needle === '' || needle === '{{1}}' ) {
		needle = '.?';
	} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
		needle = needle.slice(1,-1);
	} else {
		needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	needle = new RegExp(needle);
	ralt = window.alert;
	window.alert = function(a) {
		if ( !needle.test(String(a)) ) {
			ralt.call(window, a);
		}
	}.bind(window);
})();

# window.alert-logger
alt-logger.js application/javascript
(function() {
	let z = window.alert,
		log = console.log.bind(console);
	window.alert = function(a) {
		log('uBO: window.alert("%s")', String(a));
		return z.apply(this, arguments);
	}.bind(window);
})();
