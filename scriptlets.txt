
# popups/unders-defuser
od.js application/javascript
window.open = function () {};

# confirm-defuser
cd.js application/javascript
window.confirm = function () {};

# performance-defuser
pd.js application/javascript
window.performance = function () {};

# WebAssembly-defuser
ws.js application/javascript
window.WebAssembly = function () {};

# BetterJsPop-defuser
bp.js application/javascript
window.BetterJsPop = function () {};

# XMLHttpRequest-defuser
xhr.js application/javascript
window.XMLHttpRequest = function () {};

# fetch-defuser
ft.js application/javascript
window.fetch = function () {};

# Promise-defuser
prom.js application/javascript
window.Promise = function () {};

# noscroll-defuser
nos.js application/javascript
document.body.style.setProperty('overflow', 'auto');
document.body.style.overflow = 'auto';
document.documentElement.style.overflow = 'auto';
document.getElementById.scrolling = 'yes';
document.body.scroll = "yes";

# setTimeout-booster
stb.js application/javascript
(function() {
	console.log('setTimeout-booster injected!');
	var z = window.setTimeout,
		needle = '{{1}}',
		delay = parseInt('{{2}}', 10),
		boost = parseInt('{{3}}', 10);
	if ( needle === '' || needle === '{{1}}' ) {
		needle = '.?';
	} else if ( needle.charAt(0) === '/' && needle.slice(-1) === '/' ) {
		needle = needle.slice(1, -1);
	} else {
		needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	needle = new RegExp(needle);
	if ( isNaN(delay) ) {
		delay = 1000;
	}
	if ( isNaN(boost) || boost < 0.01 ) {
		boost = 0.0001;
	}
	window.setTimeout = function(a, b) {
		if ( b === delay && needle.test(a.toString()) ) {
			b *= boost;
		}
		return z.apply(this, arguments);
	}.bind(window);
})();

# read-Only-property defuser
rdo.js application/javascript
(function() {
	console.log('readonly-property injected!');
	var name = '{{1}}';
	var data = '{{2}}';
	if ( data === '' || data === '{{2}}' ) {
		return;
	}
	var define = function(payload) {
	try {
			Object.defineProperty(window, name, {
				configurable: false,
				set: function() {
					;
				},
				get: function() {
					return payload;
				}
			});
		} catch ( err ) { }
	};
	switch ( data ) {
		case 'true':		return define(true);
		case 'false':		return define(false);
		case '1':		return define(1);
		case '0':		return define(0);
		case 'NaN':		return define(NaN);
		case 'undefined':	return define(undefined);
		default:		return;
	}
})();

# element-baiter
bait.js application/javascript
(function() {
	console.log('bait-element injected!');
	var identifier = '{{1}}';
	var element = document.createElement('div');
	if ( identifier.charAt(0) === '#' ) {
		element.id = identifier.substring(1);
	} else if ( identifier.charAt(0) === '.' ) {
		element.className = identifier.substring(1);
	} else {
		return;
	}
	element.style.display = 'none';
	document.documentElement.appendChild(element);
})();

# setInterval-booster
sib.js application/javascript
(function() {
	console.log('setInterval-booster injected');
	var z = window.setInterval,
		needle = '{{1}}',
		delay = parseInt('{{2}}', 10),
		boost = parseInt('{{3}}', 10);
	if ( needle === '' || needle === '{{1}}' ) {
		needle = '.?';
	} else if ( needle.charAt(0) === '/' && needle.slice(-1) === '/' ) {
		needle = needle.slice(1, -1);
	} else {
		needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	needle = new RegExp(needle);
	if ( isNaN(delay) ) {
		delay = 1000;
	}
	if ( isNaN(boost) || boost < 0.01 ) {
		boost = 0.0001;
	}
	window.setInterval = function(a, b) {
		if ( b === delay && needle.test(a.toString()) ) {
			b *= boost;
		}
		return z.apply(this, arguments);
	}.bind(window);
})();

# element-remover
reor.js application/javascript
(function() {
	console.log('remove-element injected!');
	var selector = '{{1}}';
	if ( selector === '' || selector === '{{1}}' ) {
		return;
	}
	var remove = function() {
		var elements = document.querySelectorAll(selector);
		for ( let element of elements ) {
			element.remove();
		}
	};
	if ( document.readyState === 'interactive' || document.readyState === 'complete' ) {
		remove();
	} else {
		window.addEventListener('DOMContentLoaded', remove);
	}
})();

