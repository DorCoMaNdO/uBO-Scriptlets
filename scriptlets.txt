# Collection of scriptlets to be used for injection/redirection on specific domains.
#
# - Each distinct resource entry is separated by an empty line.
# - The first line in a resource entry is: token mime-type[;encoding]
# - All following lines are the data. An empty line signals the end of the
#   data.
#
# If the encoding is absent, the data will be converted to base64, and the
# encoding will be set to `;base64`.

# eval-logger 
eval-logger.js application/javascript
(function() {
	var z = window.eval,
		log = console.log.bind(console);
	window.eval = function(a) {
		log('uBO: eval("%s")', a.toString());
		return z.apply(this, arguments);
	}.bind(window);
})();

# element-clicker
eclick.js application/javascript
(function() {
	var selector = '{{1}}';
	if ( selector === '' || selector === '{{1}}' ) {
		return;
	}
	var click = function() {
		var elements = document.querySelectorAll(selector);
		for ( var element of elements ) {
			element.click();
		}
	};
	if ( document.readyState === 'interactive' || document.readyState === 'complete' ) {
		click();
	} else {
		addEventListener('DOMContentLoaded', click);
	}
})();

# script-defuser
script-defuser.js application/javascript
(function() {
    var _createElement = document.createElement;
    var needle = '{{1}}';
    if ( needle === '' || needle === '{{1}}' ) {
        needle = '.?';
    } else if ( needle.length > 2 &&
                needle.startsWith('/') && needle.endsWith('/') ) {
        needle = needle.slice(1,-1);
    } else {
        needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    }
    needle = new RegExp(needle);
    document.createElement = function(name) {
        var elem = _createElement.apply(this, arguments);
        if ( name === 'script' ) {
            elem.addEventListener('error', function(e) {
                if ( needle.test(elem.src) ) {
                    e.preventDefault();
                    e.stopPropagation();
                    var ev = new Event('load');
                    elem.dispatchEvent(ev);
                }
            });
        }
        return elem;
    };
})();

# read-Only-property defuser
rdo.js application/javascript
(function() {
	var name = '{{1}}';
	var data = '{{2}}';
	var Object = window.Object.bind(window);
	var descriptor = window.Object.getOwnPropertyDescriptor.bind(window.Object);
	var defineProperty = window.Object.defineProperty.bind(window.Object);
	var finalSetter = function() { };
	var finalGetter = function() { return data; };
	var trustedSetters = {};
	var makeProxy = function(parent, chain) {
		var i = chain.indexOf('.');
		if ( i === -1 ) {
			var current = descriptor(parent, chain);
			if ( !current || current.set !== finalSetter || current.get !== finalGetter ) {
				defineProperty(parent, chain, {
					configurable: false,
					set: finalSetter,
					get: finalGetter
				});
			}
		} else {
			var name = chain.slice(0, i);
			var val = parent[name];
			chain = chain.substring(i + 1);
			if ( val instanceof Object ) {
				makeProxy(val, chain);
			} else {
				var current = descriptor(parent, name);
				if ( !current || !trustedSetters[chain] || trustedSetters[chain] !== current.set ) {
					var setter = function(value) {
						if ( value instanceof Object ) {
							try {
								makeProxy(value, chain);
								val = value;
							} catch ( err ) { }
						}
					};
					trustedSetters[chain] = setter;
					defineProperty(parent, name, {
						configurable: false,
						set: setter,
						get: function() { return val; }
					});
				}
			}
		}
	};
	var define = function(payload) {
		data = payload;
		try {
			makeProxy(window, name);
		} catch ( err ) { }
	};
	switch ( data ) {
		case 'true':		return define(true);
		case 'false':		return define(false);
		case '1':		return define(1);
		case '0':		return define(0);
		case 'null':            return define(null);
		case 'undefined':	return define(undefined);
		case 'noopFunc':	return define(function() { });
		case 'trueFunc':        return define(function() { return true; });
		case 'falseFunc':       return define(function() { return false; });
		case 'nullFunc':        return define(function() { return null; });
		case 'unFunc':          return define(function() { return undefined; });
		case 'oneFunc':         return define(function() { return 1; });
		case 'zeFunc':          return define(function() { return 0; });
		default:		return;
	}
})();

# element-baiter
ebait.js application/javascript
(function() {
	var identifier = '{{1}}';
	var element = document.createElement('div');
	if ( identifier.charAt(0) === '#' ) {
		element.id = identifier.substring(1);
	} else if ( identifier.charAt(0) === '.' ) {
		element.className = identifier.substring(1);
	} else {
		return;
	}
	element.style.display = 'none';
	document.documentElement.appendChild(element);
})();

# element-remover
reor.js application/javascript
(function() {
	var selector = '{{1}}';
	if ( selector === '' || selector === '{{1}}' ) {
		return;
	}
	var remove = function() {
		var elements = document.querySelectorAll(selector);
		for ( var element of elements ) {
			element.remove();
		}
	};
	if ( document.readyState === 'interactive' || document.readyState === 'complete' ) {
		remove();
	} else {
		window.addEventListener('DOMContentLoaded', remove);
	}
})();

# cookie-inserter
cookie.js application/javascript
(function() {
    var data = '{{1}}';
    var path = '{{2}}';
    var domain = '{{3}}';
    var secure = '{{4}}';
    if ( data.indexOf('=') === -1 ) {
        return;
    }
    data += ';max-age=2592000'; // 30 days
    if ( path !== '' && path !== '{{2}}' ) {
        data += ';path=' + path;
    }
    if ( domain !== '' && domain !== '{{3}}' ) {
        data += ';domain=' + domain;
    }
    if ( secure === 'true' ) {
        data += ';secure';
    }
    document.cookie = data;
})();

# frame-defuser
frd.js application/javascript
(function() {
	var log = console.log.bind(console);
	var removedHead = {
		async: false,
		result: false
	};
	var removedBody = removedHead;
	var url = 'unknown';
	try {
		url = window.location.href || url;
	} catch (e) {};
	function inIframe() {
		try {
			return window.self !== window.top;
		} catch (e) {};
		return true;
	}
	function removeHead() {
		try {
			document.head.innerHTML = '';
			return true;
		} catch (e) {};
		return false;
	}
	function removeBody() {
		try {
			document.body.innerHTML = '';
			return true;
		} catch (e) {};
		return false;
	}
	if (inIframe()) {
		if (document.head) {
			removedHead.result = removeHead();
		} else {
			setTimeout(function() {
				removedHead.async = true;
				removedHead.result = removeHead();
			}, 0);
		}
		if (document.body) {
			removedBody.result = removeBody();
		} else {
			setTimeout(function() {
				removedBody.async = true;
				removedBody.result = removeBody();
			}, 0);
		}
		setTimeout(function() {
			log('uBO> Removed frame content [HEAD:%s] [BODY:%s] [URL:%s]',
				removedHead.result + (removedHead.async ? ',async' : ''),
				removedBody.result + (removedBody.async ? ',async' : ''),
				url
			);
		}, 10);
	}
})();

# atob-defuser
noatob.js application/javascript
(function() {
	var needle = '{{1}}';
	if ( needle === '' || needle === '{{1}}' ) {
		needle = '.?';
	} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
		needle = needle.slice(1,-1);
	} else {
		needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	needle = new RegExp(needle);
	realNoAtob = window.atob;
	window.atob = function(a) {
		if ( !needle.test(a.toString()) ) {
			realNoAtob.call(window, a);
		}
	}.bind(window);
})();

# atob-logger
atob-logger.js application/javascript
(function() {
	var z = window.atob,
		log = console.log.bind(console);
	window.atob = function(a) {
		log('uBO: atob("%s")', a.toString());
		return z.apply(this, arguments);
	}.bind(window);
})();

# btoa-defuser
nobtoa.js application/javascript
(function() {
	var needle = '{{1}}';
	if ( needle === '' || needle === '{{1}}' ) {
		needle = '.?';
	} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
		needle = needle.slice(1,-1);
	} else {
		needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	needle = new RegExp(needle);
	realNoBtoa = window.btoa;
	window.btoa = function(a) {
		if ( !needle.test(a.toString()) ) {
			realNoBtoa.call(window, a);
		}
	}.bind(window);
})();

# btoa-logger
btoa-logger.js application/javascript
(function() {
	var z = window.btoa,
		log = console.log.bind(console);
	window.btoa = function(a) {
		log('uBO: btoa("%s")', a.toString());
		return z.apply(this, arguments);
	}.bind(window);
})();

# decodeURIComponent-defuser
noduc.js application/javascript
(function() {
	var needle = '{{1}}';
	if ( needle === '' || needle === '{{1}}' ) {
		needle = '.?';
	} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
		needle = needle.slice(1,-1);
	} else {
		needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	needle = new RegExp(needle);
	realnoduc = window.decodeURIComponent;
	window.decodeURIComponent = function(a) {
		if ( !needle.test(a.toString()) ) {
			realnoduc.call(window, a);
		}
	}.bind(window);
})();

# decodeURIComponent-logger
duc-logger.js application/javascript
(function() {
	var z = window.decodeURIComponent,
		log = console.log.bind(console);
	window.decodeURIComponent = function(a) {
		log('uBO: decodeURIComponent("%s")', a.toString());
		return z.apply(this, arguments);
	}.bind(window);
})();

# encodeURIComponent-defuser
noeuc.js application/javascript
(function() {
	var needle = '{{1}}';
	if ( needle === '' || needle === '{{1}}' ) {
		needle = '.?';
	} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
		needle = needle.slice(1,-1);
	} else {
		needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	needle = new RegExp(needle);
	realnoeuc = window.encodeURIComponent;
	window.encodeURIComponent = function(a) {
		if ( !needle.test(a.toString()) ) {
			realnoeuc.call(window, a);
		}
	}.bind(window);
})();

# encodeURIComponent-logger
euc-logger.js application/javascript
(function() {
	var z = window.encodeURIComponent,
		log = console.log.bind(console);
	window.encodeURIComponent = function(a) {
		log('uBO: encodeURIComponent("%s")', a.toString());
		return z.apply(this, arguments);
	}.bind(window);
})();

# parseInt-defuser
nopi.js application/javascript
(function() {
	var needle = '{{1}}';
	if ( needle === '' || needle === '{{1}}' ) {
		needle = '.?';
	} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
		needle = needle.slice(1,-1);
	} else {
		needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	needle = new RegExp(needle);
	realnopi = window.parseInt;
	window.parseInt = function(a) {
		if ( !needle.test(a.toString()) ) {
			realnopi.call(window, a);
		}
	}.bind(window);
})();

# parseInt-logger
nopi-logger.js application/javascript
(function() {
	var z = window.parseInt,
		log = console.log.bind(console);
	window.parseInt = function(a) {
		log('uBO: parseInt("%s")', a.toString());
		return z.apply(this, arguments);
	}.bind(window);
})();

# String.fromCharCode-defuser
schar.js application/javascript
(function() {
	var needle = '{{1}}';
	if ( needle === '' || needle === '{{1}}' ) {
		needle = '.?';
	} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
		needle = needle.slice(1,-1);
	} else {
		needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	needle = new RegExp(needle);
	realschar = window.String.fromCharCode;
	window.String.fromCharCode = function(a) {
		if ( !needle.test(a.toString()) ) {
			realschar.call(window, a);
		}
	}.bind(window);
})();

# String.fromCharCode-logger
schar-logger.js application/javascript
(function() {
	var z = window.String.fromCharCode,
		log = console.log.bind(console);
	window.String.fromCharCode = function(a) {
		log('uBO: String.fromCharCode("%s")', a.toString());
		return z.apply(this, arguments);
	}.bind(window);
})();

# document.write-defuser
dwrite.js application/javascript
(function() {
	var needle = '{{1}}';
	if ( needle === '' || needle === '{{1}}' ) {
		needle = '.?';
	} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
		needle = needle.slice(1,-1);
	} else {
		needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	needle = new RegExp(needle);
	rdwrite = document.write.bind(document);
	window.document.write = function(a) {
		if ( !needle.test(a.toString()) ) {
			rdwrite.call(window, a);
		}
	}.bind(window);
})();

# document.write-logger
dwrite-logger.js application/javascript
(function() {
	var z = window.document.write.bind(document),
		log = console.log.bind(console);
	window.document.write = function(a) {
		log('uBO: document.write("%s")', a.toString());
		return z.apply(this, arguments);
	}.bind(window);
})();

# document.getElementById-defuser
dgebi.js application/javascript
(function() {
	var needle = '{{1}}';
	if ( needle === '' || needle === '{{1}}' ) {
		needle = '.?';
	} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
		needle = needle.slice(1,-1);
	} else {
		needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	needle = new RegExp(needle);
	rdgebi = document.getElementById.bind(document);
	window.document.getElementById = function(a) {
		if ( !needle.test(a.toString()) ) {
			rdgebi.call(window, a);
		}
	}.bind(window);
})();

# document.getElementById-logger
dgebi-logger.js application/javascript
(function() {
	var z = window.document.getElementById.bind(document),
		log = console.log.bind(console);
	window.document.getElementById = function(a) {
		log('uBO: document.getElementById("%s")', a.toString());
		return z.apply(this, arguments);
	}.bind(window);
})();

# window.alert-defuser
alt.js application/javascript
(function() {
	var needle = '{{1}}';
	if ( needle === '' || needle === '{{1}}' ) {
		needle = '.?';
	} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
		needle = needle.slice(1,-1);
	} else {
		needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	needle = new RegExp(needle);
	ralt = window.alert;
	window.alert = function(a) {
		if ( !needle.test(a.toString()) ) {
			ralt.call(window, a);
		}
	}.bind(window);
})();

# window.alert-logger
alt-logger.js application/javascript
(function() {
	var z = window.alert,
		log = console.log.bind(console);
	window.alert = function(a) {
		log('uBO: window.alert("%s")', a.toString());
		return z.apply(this, arguments);
	}.bind(window);
})();

# document.createElement-defuser
dce.js application/javascript
(function() {
	var needle = '{{1}}';
	if ( needle === '' || needle === '{{1}}' ) {
		needle = '.?';
	} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
		needle = needle.slice(1,-1);
	} else {
		needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	needle = new RegExp(needle);
	rdce = document.createElement.bind(document);
	window.document.createElement = function(a) {
		if ( !needle.test(a.toString()) ) {
			rdce.call(window, a);
		}
	}.bind(window);
})();

# document.createElement-logger
dce-logger.js application/javascript
(function() {
	var z = window.document.createElement.bind(document),
		log = console.log.bind(console);
	window.document.createElement = function(a) {
		log('uBO: document.createElement("%s")', a.toString());
		return z.apply(this, arguments);
	}.bind(window);
})();

# document.readyState-defuser
drs.js application/javascript
(function() {
	var needle = '{{1}}';
	if ( needle === '' || needle === '{{1}}' ) {
		needle = '.?';
	} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
		needle = needle.slice(1,-1);
	} else {
		needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	needle = new RegExp(needle);
	rdrs = document.readyState.bind(document);
	window.document.readyState = function(a) {
		if ( !needle.test(a.toString()) ) {
			rdrs.call(window, a);
		}
	}.bind(window);
})();

# document.readyState-logger
drs-logger.js application/javascript
(function() {
	var z = window.document.readyState,
		log = console.log.bind(console);
	window.document.readyState = function(a) {
		log('uBO: document.readyState("%s")', a.toString());
		return z.apply(this, arguments);
	}.bind(window);
})();

# document.querySelector-defuser
dqs.js application/javascript
(function() {
	var needle = '{{1}}';
	if ( needle === '' || needle === '{{1}}' ) {
		needle = '.?';
	} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
		needle = needle.slice(1,-1);
	} else {
		needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	needle = new RegExp(needle);
	rdqs = document.querySelector.bind(document);
	window.document.querySelector = function(a) {
		if ( !needle.test(a.toString()) ) {
			rdqs.call(window, a);
		}
	}.bind(window);
})();

# document.querySelector-logger
dqs-logger.js application/javascript
(function() {
	var z = window.document.querySelector.bind(document),
		log = console.log.bind(console);
	window.document.querySelector = function(a) {
		log('uBO: document.querySelector("%s")', a.toString());
		return z.apply(this, arguments);
	}.bind(window);
})();

# document.querySelectorAll-defuser
dqsa.js application/javascript
(function() {
	var needle = '{{1}}';
	if ( needle === '' || needle === '{{1}}' ) {
		needle = '.?';
	} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
		needle = needle.slice(1,-1);
	} else {
		needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	needle = new RegExp(needle);
	rdqsa = document.querySelectorAll.bind(document);
	window.document.querySelectorAll = function(a) {
		if ( !needle.test(a.toString()) ) {
			rdqsa.call(window, a);
		}
	}.bind(window);
})();

# document.querySelectorAll-logger
dqsa-logger.js application/javascript
(function() {
	var z = window.document.querySelectorAll.bind(document),
		log = console.log.bind(console);
	window.document.querySelectorAll = function(a) {
		log('uBO: document.querySelectorAll("%s")', a.toString());
		return z.apply(this, arguments);
	}.bind(window);
})();

# document.getElementsByClassName-defuser
dgebcn.js application/javascript
(function() {
	var needle = '{{1}}';
	if ( needle === '' || needle === '{{1}}' ) {
		needle = '.?';
	} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
		needle = needle.slice(1,-1);
	} else {
		needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	needle = new RegExp(needle);
	rdgebcn = document.getElementsByClassName.bind(document);
	window.document.getElementsByClassName = function(a) {
		if ( !needle.test(a.toString()) ) {
			rdgebcn.call(window, a);
		}
	}.bind(window);
})();

# document.getElementsByClassName-logger
dgebcn-logger.js application/javascript
(function() {
	var z = window.document.getElementsByClassName.bind(document),
		log = console.log.bind(console);
	window.document.getElementsByClassName = function(a) {
		log('uBO: document.getElementsByClassName("%s")', a.toString());
		return z.apply(this, arguments);
	}.bind(window);
})();

# document.getElementsByName-defuser
dgebn.js application/javascript
(function() {
	var needle = '{{1}}';
	if ( needle === '' || needle === '{{1}}' ) {
		needle = '.?';
	} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
		needle = needle.slice(1,-1);
	} else {
		needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	needle = new RegExp(needle);
	rdgebn = document.getElementsByName.bind(document);
	window.document.getElementsByName = function(a) {
		if ( !needle.test(a.toString()) ) {
			rdgebn.call(window, a);
		}
	}.bind(window);
})();

# document.getElementsByName-logger
dgebn-logger.js application/javascript
(function() {
	var z = window.document.getElementsByName.bind(document),
		log = console.log.bind(console);
	window.document.getElementsByName = function(a) {
		log('uBO: document.getElementsByName("%s")', a.toString());
		return z.apply(this, arguments);
	}.bind(window);
})();

# document.getElementsByTagName-defuser
dgebtn.js application/javascript
(function() {
	var needle = '{{1}}';
	if ( needle === '' || needle === '{{1}}' ) {
		needle = '.?';
	} else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
		needle = needle.slice(1,-1);
	} else {
		needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	needle = new RegExp(needle);
	rdgebtn = document.getElementsByTagName.bind(document);
	window.document.getElementsByTagName = function(a) {
		if ( !needle.test(a.toString()) ) {
			rdgebtn.call(window, a);
		}
	}.bind(window);
})();

# document.getElementsByTagName-logger
dgebtn-logger.js application/javascript
(function() {
	var z = window.document.getElementsByTagName.bind(document),
		log = console.log.bind(console);
	window.document.getElementsByTagName = function(a) {
		log('uBO: document.getElementsByTagName("%s")', a.toString());
		return z.apply(this, arguments);
	}.bind(window);
})();
