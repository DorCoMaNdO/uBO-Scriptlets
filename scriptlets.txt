# Collection of javascripts to be used for scriptlet injection on specific domains.

# readOnly-property
# example.com##+js(ro, canAds, true)
ro.js application/javascript
(() => {
		let prop = '{{1}}';
		if ( prop === '' || prop === '{{1}}' ) { return; }
		let data = '{{2}}';
		const Object = window.Object.bind(window);
		const descriptor = window.Object.getOwnPropertyDescriptor.bind(window.Object);
		const defineProperty = window.Object.defineProperty.bind(window.Object);
		const finalSetter = () => { };
		const finalGetter = () => { return data; };
		const trustedSetters = { };
		const makeProxy = (parent, chain) => {
			const i = chain.indexOf('.');
			if ( i === -1 ) {
				let current = descriptor(parent, chain);
				if ( !current || current.set !== finalSetter || current.get !== finalGetter ) {
					defineProperty(parent, chain, {
						configurable: false,
						set: finalSetter,
						get: finalGetter
					});
				}
			} else {
				let prop = chain.slice(0, i);
				let val = parent[prop];
				chain = chain.substring(i + 1);
				if ( val instanceof Object ) {
					makeProxy(val, chain);
				} else {
					let current = descriptor(parent, prop);
					if ( !current || !trustedSetters[chain] || trustedSetters[chain] !== current.set ) {
						const setter = value => {
							if ( value instanceof Object ) {
								try {
									makeProxy(value, chain);
									val = value;
								} catch { }
							}
						};
						trustedSetters[chain] = setter;
						defineProperty(parent, prop, {
							configurable: false,
							set: setter,
							get: () => { return val; }
						});
					}
				}
			}
		};
		const define = payload => {
			data = payload;
			try {
				makeProxy(window, prop);
			} catch { }
		};
		switch (data) {
			default: 		return define(data);
		}
})();		

# element-remover
# example.com##+js(remove-elem, #example)
remove-elem.js application/javascript
(() => {
		'use strict';
		const selector = '{{1}}';
		if ( selector === '' || selector === '{{1}}' ) { return; }
		const rm = () => {
		 			   const elements = document.querySelectorAll(selector);
					   try {
						  for (const element of elements) {
							if (!document.querySelector(selector)) { break; }
							element.remove();
					       	  }
					   } catch { }
		};
		const observer = new MutationObserver(rm);
    		observer.observe(document.documentElement, { childList: true, subtree: true });
		if (document.readyState === 'complete') { observer.disconnect(); return; } 
})();

# attribute-remover
# example.com##+js(rm-attr, allow, iframe)
rm-attr.js application/javascript
(() => {
		    'use strict';
		    const needle = '{{1}}';
		    if ( needle === '' || needle === '{{1}}' ) { return; }
		    const needles = needle.split(/\s*\|\s*/);
		    let selector = '{{2}}';
		    if ( selector === '' || selector === '{{2}}' ) { selector = `[${tokens.join('],[')}]`; }
		    const rmattr = () => {
						const nodes = document.querySelectorAll(selector);
						try {
			    				for ( const node of nodes ) {
								for ( const attr of needles ) {
									if ( node.hasAttribute(attr) ) {
				    					     node.removeAttribute(attr);
									}     
								}
			    				}
						} catch { }
		    };
		    const observer = new MutationObserver(rmattr);
    		    observer.observe(document.documentElement, { childList: true, subtree: true });
		    if (document.readyState === 'complete') { observer.disconnect(); return; } 
})();

# DOM-Node-Remover
# example.com##+js(remove-node, /adblock|adsense/, script)
remove-node.js application/javascript
(() => { 
          'use strict';
          let needle = '{{1}}';
          if ( needle === '' || needle === '{{1}}' ) {
              needle = '.?';
          } else if ( needle.slice(0,1) === '/' && needle.slice(-1) === '/' ) {
              needle = needle.slice(1,-1);
          } else {
              needle = needle.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
          }
          needle = new RegExp(needle);
          const remnode = () => {
                                        try {
                                                  const nodes = document.querySelectorAll('{{2}}');
                                                  for (const node of nodes) {
                                                       if (node.outerHTML.match(needle)) {
                                                                node.textContent = ''; 
                                                                node.remove();
                                                       }           
                                                  }
                                        } catch { }
          };
          const observer = new MutationObserver(remnode);
          observer.observe(document.documentElement, { childList: true, subtree: true });
          if (document.readyState === 'complete') { observer.disconnect(); return; }
})();

# element-setAttribute
# example.com##+js(set-attr, preload, none, video)
set-attr.js application/javascript
(() => {
          'use strict';
          const token = '{{1}}';
          if ( token === '' || token === '{{1}}' ) { return; }
          const tokens = token.split(/\s*\|\s*/);
          let selector = '{{3}}';
          if ( selector === '' || selector === '{{3}}' ) { selector = `[${tokens.join('],[')}]`; }
          const stattr = () => {
					try {
						const nodes = document.querySelectorAll(selector);
						for (const node of nodes) {
							for (const attr of tokens) {
								node.setAttribute(attr, '{{2}}');
							}
						}
					} catch { }
          };
          const observer = new MutationObserver(stattr);
	  observer.observe(document.documentElement, { childList: true, subtree: true });
	  if (document.readyState === 'complete') { observer.disconnect(); return; } 
})();

# element-toggleAttribute
# example.com##+js(tog-attr, preload, video)
tog-attr.js application/javascript
(() => {
		  'use strict';
		  const token = '{{1}}';
		  if ( token === '' || token === '{{1}}' ) { return; }
		  const tokens = token.split(/\s*\|\s*/);
		  let selector = '{{2}}';
		  if ( selector === '' || selector === '{{2}}' ) { selector = `[${tokens.join('],[')}]`; }
		  const togattr = ev => {
						 if (ev) { window.removeEventListener(ev.type, togattr, true); }
						 try {
							const nodes = document.querySelectorAll(selector);
							for (const node of nodes) {
								for (const attr of tokens) {
								     node.toggleAttribute(attr);
								}
							}
						} catch { }
		  };
		  if (document.readyState === 'loading') {
		    	    window.addEventListener('DOMContentLoaded', togattr, true);
	   	  } else {
		    	    togattr();
	   	  }
})();

# cookie-setter
# example.com##+js(cookie-set, name, value, age)
cookie-set.js application/javascript
(() => {
		'use strict';
		const cs = ev => {
					if (ev) { window.removeEventListener(ev.type, cs, true); }
					try {
						document.cookie = '{{1}}={{2}}; max-age={{3}}; secure; path=/;';
					} catch { }
	   	};
	   	if (document.readyState === 'loading') {
		    	 window.addEventListener('DOMContentLoaded', cs, true);
	   	} else {
		    	 cs();
	   	}
})();	

# element-replacer
# example.com##+js(replace-elem, .element, div)
replace-elem.js application/javascript
(() => {
		'use strict';
		const selector = '{{1}}';
		if ( selector === '' || selector === '{{1}}' ) { return; }
		const elem = document.createElement('{{2}}');
		if ( elem === '' || elem === '{{2}}' ) { return; }
		const replace = ev => {
					    if (ev) { window.removeEventListener(ev.type, replace, true); }
					    try {
							const elements = document.querySelectorAll(selector);
							for ( const element of elements ) {
								const text = element.textContent;
								const attrs = element.attributes;
								element.replaceWith(elem);
								elem.textContent = text;
								for ( const attr of attrs ) {
								      const prop = attr.nodeName;
								      const value = attr.nodeValue;
								      elem.setAttribute(prop, value);
								}	
							}   
					    } catch { }
		};
		if (document.readyState === 'loading') {
		          window.addEventListener('DOMContentLoaded', replace, true);
		} else {
			  replace();
		}
})();

# prune-property
# example.com##+js(remove-prop, foo.bar)
remove-prop.js application/javascript
(() => {
	      'use strict';
  	      const remove = ev => {
	      				    if (ev) { window.removeEventListener(ev.type, remove, true); }
					    try {
						    delete {{1}};
					    } catch { }
              };
              if (document.readyState === 'loading') {
                       window.addEventListener('DOMContentLoaded', remove, true); 
              } else {
                       remove();  
              }
})();

# DOM-element-creator
# example.com##+js(add-elem, #id|.class, display: block !important, div)
add-elem.js application/javascript
(() => {
		'use strict';
		const identifier = '{{1}}';
		if ( identifier === '' || identifier === '{{1}}' ) { return; }
		const identifiers = identifier.split(/\s*\|\s*/);
		let executeOnce = false;
		const addelem = () => {
						try {
							if (executeOnce !== false) { return; }
							const element = document.createElement('{{3}}');
							for (const identifieradder of identifiers) {
								if (identifieradder.charAt(0) === '#') {
									 element.id = identifieradder.substring(1);
								} else if (identifieradder.charAt(0) === '.') {
									 element.className = identifieradder.substring(1);
								} else { return; }	 
							}
							element.style.cssText = '{{2}}';
							document.body.append(element);
							executeOnce = true;
						} catch { }
	   	};
	   	const observer = new MutationObserver(addelem);
    		observer.observe(document.documentElement, { childList: true, subtree: true });
		if (document.readyState === 'complete') { observer.disconnect(); return; }
})();

# url-query-remover
# example.com##+js(query-stripper, fbclid|gclid)
query-stripper.js application/javascript
(() => {
		'use strict';
		const needle = '{{1}}';
		if ( needle === '' || needle === '{{1}}' ) { return; }			
	   	const needles = needle.split(/\s*\|\s*/);
		const querystripper = ev => {
						if (ev) { window.removeEventListener(ev.type, querystripper, true); }
						try {
			  		      		const url = new URL(location.href);
					      		const params = new URLSearchParams(url.search.slice(1));
					      		for (const needleremover of needles) {
					      			if (params.has(needleremover)) {
									url.searchParams.delete(needleremover);
			       						window.location.href = url;
								}
			  		      		}		
						} catch { }
		};		    
		if (document.readyState === 'loading') {
		    	 window.addEventListener('DOMContentLoaded', querystripper, true);
		} else {
		     	 querystripper();
		}
})();

# class-remover
# example.com##+js(remove-class, example, .example)
remove-class.js application/javascript
(() => {
		    'use strict';
		    const needle = '{{1}}';
		    if ( needle === '' || needle === '{{1}}' ) { return; }
		    const needles = needle.split(/\s*\|\s*/);
		    let selector = '{{2}}';
		    if ( selector === '' || selector === '{{2}}' ) { selector = `[${tokens.join('],[')}]`; }
		    const rmclass = () => {
						const nodes = document.querySelectorAll(selector);
						try {
			    				for ( const node of nodes ) {
								for ( const className of needles ) {
									if ( node.classList.contains(className) ) {
										node.classList.remove(className);
									}	
								}
			    				}
						} catch { }
		    };
		    const observer = new MutationObserver(rmclass);
    		    observer.observe(document.documentElement, { childList: true, subtree: true });
		    if (document.readyState === 'complete') { observer.disconnect(); return; } 
})();

# class-adder
# example.com##+js(add-class, example, .example)
add-class.js application/javascript
(() => {
		    'use strict';
		    const needle = '{{1}}';
		    if ( needle === '' || needle === '{{1}}' ) { return; }
		    const needles = needle.split(/\s*\|\s*/);
		    let selector = '{{2}}';
		    if ( selector === '' || selector === '{{2}}' ) { selector = `[${tokens.join('],[')}]`; }
		    const addclass = () => {
						const nodes = document.querySelectorAll(selector);
						try {
			    				for ( const node of nodes ) {
								for ( const className of needles ) {
									if ( !node.classList.contains(className) ) {
										node.classList.add(className);
									}	
								}
			    				}
						} catch { }
		    };
		    const observer = new MutationObserver(addclass);
    		    observer.observe(document.documentElement, { childList: true, subtree: true });
		    if (document.readyState === 'complete') { observer.disconnect(); return; } 
})();

# class-toggler
# example.com##+js(toggle-class, example, .example)
toggle-class.js application/javascript
(() => {
	    'use strict';
	    const needle = '{{1}}';
	    if ( needle === '' || needle === '{{1}}' ) { return; }
	    const needles = needle.split(/\s*\|\s*/);
	    let selector = '{{2}}';
	    if ( selector === '' || selector === '{{2}}' ) { selector = `[${tokens.join('],[')}]`; }
	    const toggleclass = ev => {
						if (ev) { window.removeEventListener(ev.type, toggleclass, true); }
						const nodes = document.querySelectorAll(selector);
						try {
							for ( const node of nodes ) {
								for ( const className of needles ) {
								      node.classList.toggle(className);
								}
							}
						} catch { }
	    };
	    if (document.readyState === 'loading') {
		      window.addEventListener('DOMContentLoaded', toggleclass, true);
	    } else {
		      toggleclass();
	    } 
})();

# class-replacer
# example.com##+js(replace-class, example, example2, .example)
replace-class.js application/javascript
(() => {
		    'use strict';
		    const needle = '{{1}}';
		    if ( needle === '' || needle === '{{1}}' ) { return; }
		    const needles = needle.split(/\s*\|\s*/);
		    let selector = '{{3}}';
		    if ( selector === '' || selector === '{{3}}' ) {
			selector = `[${tokens.join('],[')}]`;
		    }
		    const replaceclass = () => {
							const nodes = document.querySelectorAll(selector);
							try {
								for ( const node of nodes ) {
									for ( const className of needles ) {
										if ( node.classList.contains(className) ) {
										     node.classList.replace(className, '{{2}}');
										}
									}
								}
							} catch { }
		    };
		    const observer = new MutationObserver(replaceclass);
    		    observer.observe(document.documentElement, { childList: true, subtree: true });
		    if (document.readyState === 'complete') { observer.disconnect(); return; } 
})();

# innerHTML-setter
# example.com##+js(set-innerHTML, #id, <span class="btext">Download</span>)
set-innerHTML.js application/javascript
(() => {
		'use strict';
		const selector = '{{1}}';
		if ( selector === '' || selector === '{{1}}' ) { return; }
		let executeOnce = false;
		const sih = () => {
					   if (executeOnce !== false) { return; }
					   const elements = document.querySelectorAll(selector);
					   try {
						  for (const element of elements) {
							element.innerHTML = '{{2}}';
						  }
						  executeOnce = true;
					   } catch { }
		};
		const observer = new MutationObserver(sih);
	  	observer.observe(document.documentElement, { childList: true, subtree: true });
	  	if (document.readyState === 'complete') { observer.disconnect(); return; } 
})();

# DOM-Node-logger
# example.com##+js(logger, script)
logger.js application/javascript
(() => {
		'use strict';
		const needle = '{{1}}';
		if ( needle === '' || needle === '{{1}}' ) { return; }
		const logtags = ev => {
					  if (ev) { window.removeEventListener(ev.type, logtags, true); }
					  try {
						const tags = document.querySelectorAll(needle);
						const log = console.log.bind(console);
						for (const tag of tags) {
							log('uBO: %s("%s")', needle, tag.outerHTML);
						}
					  } catch { }
		};
		if (document.readyState === 'complete') {
			logtags(); 
		} else {
			window.addEventListener('load', logtags, true);
		}
})();

# hyperlink-setter
# example.com##+js(multiup, form[action], button[link], action, link)
multiup.js application/javascript
(() => {
		'use strict';
		const selector = '{{1}}';
		if ( selector === '' || selector === '{{1}}' ) { return; }
		const selector2 = '{{2}}';
		if ( selector2 === '' || selector2 === '{{2}}' ) { return; }
		const multiup = () => {
						const elem = document.querySelectorAll(selector);
						const elem2 = document.querySelectorAll(selector2);
						try {
							for (let i = 0; i < elem.length; i++) {
								elem[i].setAttribute('{{3}}', elem2[i].getAttribute('{{4}}'));
							}
						} catch { }
		};
		const observer = new MutationObserver(multiup);
	  	observer.observe(document.documentElement, { childList: true, subtree: true });
	  	if (document.readyState === 'complete') { observer.disconnect(); return; } 
})();

# iframe-inserter
# example.com##+js(add-iframe, 2, id, about:blank)
add-iframe.js application/javascript
(() => {
    	        'use strict';
		const iframes = '{{1}}';
		if ( iframes === '' || iframes === '{{1}}' ) { return; }
		let executeOnce = false;
		const addframe = () => {
						  try {
							if (executeOnce !== false) { return; }
							for ( let i = 0; i < iframes; i++ ) {
							      const iframe = document.createElement('iframe');
							      iframe.setAttribute('id', '{{2}}');
							      iframe.setAttribute('src', '{{3}}');
							      document.body.append(iframe);
							}
							executeOnce = true;
						  } catch { }
		};			
		const observer = new MutationObserver(addframe);
    		observer.observe(document.documentElement, { childList: true, subtree: true });
		if (document.readyState === 'complete') { observer.disconnect(); return; }		
})();

# DOM-element-inserter
# example.com##+js(insert-elem, #id|.class, display: block !important, node, div)
insert-elem.js application/javascript
(() => {
		'use strict';
		const identifier = '{{1}}';
		if ( identifier === '' || identifier === '{{1}}' ) { return; }
		const identifiers = identifier.split(/\s*\|\s*/);
		let executeOnce = false;
		const insertelem = () => {
						try {
							if (executeOnce !== false) { return; }
							const element = document.createElement('{{4}}');
							const node = document.querySelector('{{3}}');
							for (const identifieradder of identifiers) {
								if (identifieradder.charAt(0) === '#') {
									 element.id = identifieradder.substring(1);
								} else if (identifieradder.charAt(0) === '.') {
									 element.className = identifieradder.substring(1);
								} else { return; }	 
							}
							element.style.cssText = '{{2}}';
							document.body.insertBefore(element, node);
							executeOnce = true;
						} catch { }
	   	};
	   	const observer = new MutationObserver(insertelem);
    		observer.observe(document.documentElement, { childList: true, subtree: true });
		if (document.readyState === 'complete') { observer.disconnect(); return; } 
})();
